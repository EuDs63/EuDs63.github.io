<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>记录 on EuDs&#39;s Blog</title>
    <link>https://euds63.github.io/tags/%E8%AE%B0%E5%BD%95/</link>
    <description>Recent content in 记录 on EuDs&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 21 Oct 2023 12:50:17 +0800</lastBuildDate><atom:link href="https://euds63.github.io/tags/%E8%AE%B0%E5%BD%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>诗词</title>
      <link>https://euds63.github.io/2023/%E8%AF%97%E8%AF%8D/</link>
      <pubDate>Tue, 06 Jun 2023 22:53:45 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/%E8%AF%97%E8%AF%8D/</guid>
      <description>暂时定于用来记录些诗词</description>
      <content:encoded><![CDATA[<h1 id="诗词">诗词</h1>
<p><strong>暂时定于用来记录些诗词</strong></p>
<h2 id="鹧鸪天正月十一日观灯-----姜夔">鹧鸪天（正月十一日观灯）     姜夔</h2>
<p>巷陌风光纵赏时。笼纱未出马先嘶。白头居士无呵殿，只有乘肩小女随。</p>
<p>花满市，月侵衣。少年情事老来悲。沙河塘上春寒浅，看了游人缓缓归。</p>
<p><strong>看过一篇点评。说这阙词可能是唯一一阙描写了女儿坐在爸爸肩头的。那篇文章中还写，说姜夔半生潦倒，不知他的小女命运几何。我感觉不管以后如何，当坐在爸爸肩头赏灯的时候肯定是很幸福的。</strong></p>
<hr>
<h2 id="咏史-李梦唐">咏史 李梦唐</h2>
<p>高阁垂裳调鼎时，可怜天下有微词。
覆舟水是苍生泪，不到横流君不知。</p>
<hr>
<h2 id="拟行路难-其四-鲍照">拟行路难-其四 鲍照</h2>
<p>泻水置平地，各自东西南北流。
人生亦有命，安能兴叹复坐愁！
酌酒以自宽，举杯断绝歌路难。
心非木石岂无感，吞声踯躅不敢言。</p>
<p><strong>很喜欢最后这一句。今天（2023年6月6日）才知道鲍照久居建康，也就是南京，然后才发信现江苏和山东竟然是邻居。</strong></p>
<hr>
<h2 id="塞下曲-其二-王昌龄">塞下曲-其二 王昌龄</h2>
<p>饮马渡秋水，水寒风似刀。
平沙日未没，黯黯见临洮。
昔日长城战，咸言意气高。
黄尘足今古，白骨乱蓬蒿。</p>
<p><strong>四月份记的一首诗，已经忘了为什么记了。</strong></p>
<hr>
<h2 id="拟挽歌辞-陶渊明">拟挽歌辞 陶渊明</h2>
<p>有生必有死，早终非命促。
昨暮同为人，今旦在鬼录。
魂气散何之，枯形寄古木。
娇儿索父啼，良友抚我哭，
得失不复知，是非安能觉！
千秋万岁后，谁知荣与辱？
但恨在世时，饮酒不得足。</p>
<p>在昔无酒饮，今但湛空觞。
春醪生浮蚁，何时更能尝！
肴案盈我前，亲旧哭我旁。
欲语口无音，欲视眼无光。
昔在高唐寝，今宿荒草乡；
一朝出门去，归来夜未央。</p>
<p>荒草何茫茫，白杨亦萧萧。
严霜九月中，送我出远郊。
四面无人居，高坟自嶣峣。
马为仰天鸣，风为自萧条。
幽室一已闭，千年不复朝。
千年不复朝，贤达无奈何。
向来相送人，各自还其家。
亲戚或余悲，他人亦已歌。
死去何所道，托体同山阿。</p>
<p><strong>之前读不懂，今年读懂了。</strong></p>
<p><strong>“得失不复知，是非安能觉”这句，让我想到“死去元知万事空”。他们都不信什么在天之灵，都认为死了就是死了。我也认同这种想法，但更希望能有在天之灵。</strong></p>
<p><strong>“春醪生浮蚁，何时更能尝”这句看了注释才知道自己完全读反了。说的是祭酒的时候，我理解为生的时候。</strong></p>
<p><strong>“亲戚或余悲，他人亦已歌”。听着很残酷，但我现在觉得：死后能让他人偶尔想起，已经是很了不起的事了</strong></p>
<hr>
<h2 id="定风波-南海归赠王定国侍人寓娘-苏轼">定风波-南海归赠王定国侍人寓娘 苏轼</h2>
<p>王定国哥儿曰柔奴，姓宇文氏，眉目娟丽，善应对，家世住京师。定国南迁归，余问柔：“广南应是不好？”柔对曰：“此心安处，便是吾乡。”因为缀词云。</p>
<p>常羡人间琢玉郎，天教分付酥娘。尽道清歌传皓齿，风起，雪飞炎海变清凉。
万里归来颜愈少。微笑，笑时犹带岭梅香。试问岭南应不好，却道：此心安处是吾乡。</p>
<p><strong>苏轼的两阙定风波我都很喜欢。</strong></p>
<h2 id="定风波-苏轼">定风波 苏轼</h2>
<p>三月七日，沙湖道中遇雨，雨具先去，同行皆狼狈，余独不觉。已而放晴，故作此。</p>
<p>莫听穿林打叶声，何妨吟啸且徐行。竹杖芒鞋轻胜马，谁怕，一蓑烟雨任平生。
料峭春风吹酒醒，微冷，山头斜照却相迎。回首向来萧瑟处，归去，也无风雨也无晴。</p>
<p><strong>蓑这个意像是诗词里的常客了。</strong></p>
<p><strong>对这阙词一直有个印象，就是苏轼淋雨生病了，去看病又写了阙《游沙湖》。但是查了下才发现自己的记忆是错的。苏轼去看的是手肿，明显不是因为淋雨</strong></p>
<hr>
<h2 id="朝中措送刘仲原甫出守维扬-欧阳修">朝中措·送刘仲原甫出守维扬 欧阳修</h2>
<p>平山栏槛倚晴空。山色有无中。手种堂前垂柳，别来几度春风。
文章太守，挥毫万字，一饮千钟。行乐直须年少，尊前看取衰翁。</p>
<p><strong>之前去扬州找攻略的时候翻到的。</strong></p>
<hr>
<h2 id="汴河怀古-皮日休">汴河怀古 皮日休</h2>
<p>尽道隋亡为此河，至今千里赖通波。
若无水殿龙舟事，共禹论功不较多。</p>
<p><strong>在大运河博物馆看到的。现在想到皮日休在开元寺待过一段时间。影壁上好像还有他的名。</strong></p>
<hr>
<h2 id="题龙阳县青草湖-唐珙">题龙阳县青草湖 唐珙</h2>
<p>西风吹老洞庭波，一夜湘君白发多，
醉后不知天在水，满船清梦压星河。</p>
<p><strong>老字用得很妙，之前没悟出来</strong></p>
<p><strong>最后一句我也很喜欢。我也蛮喜欢坐船的。</strong></p>
<hr>
<h2 id="答武陵太守-王昌龄">答武陵太守 王昌龄</h2>
<p>仗剑行千里，微躯感一言。
曾为大梁客，不负信陵恩。</p>
<p><strong>我比较喜欢前面两句，但却不太能做得到，反而是“微躯不敢言”。与古人比，可谓差远了</strong></p>
<hr>
<h2 id="临江节士歌-李白">临江节士歌 李白</h2>
<p>洞庭白波木叶稀，燕鸿始入吴云飞。
吴云寒，燕鸿苦。
风号沙宿潇湘浦，节士悲秋泪如雨。
白日当天心，照之可以事明主。
壮士愤，雄风生。
安得倚天剑，跨海斩长鲸。</p>
<p><strong>可能是我水平有限，总觉得这首有种在高潮时却戛然而止的感觉</strong></p>
<hr>
<h2 id="陇西行四首-陈陶">陇西行四首 陈陶</h2>
<p>汉主东封报太平，无人金阙议边兵。
纵饶夺得林胡塞，碛地桑麻种不生。</p>
<p>誓扫匈奴不顾身，五千貂锦丧胡尘。
可怜无定河边骨，犹是春闺梦里人。</p>
<p>陇戍三看塞草青，楼烦新替护羌兵。
同来死者伤离别，一夜孤魂哭旧营。</p>
<p>黠虏生擒未有涯，黑山营阵识龙蛇。
自从贵主和亲后，一半胡风似汉家。</p>
<p><strong>“可怜无定河边骨，犹是春闺梦里人”这句读来很有感觉。</strong></p>
<hr>
<h2 id="秋词二首其一">秋词二首·其一</h2>
<p>自古逢秋悲寂寥，我言秋日胜春朝。
晴空一鹤排云上，便引诗情到碧霄。</p>
<p><strong>这几天秋意已经很浓了。今天散步的时候看着一地的落叶莫名有些心情不好。</strong></p>
<p><strong>先是想到“伤春悲秋”，就觉得自己的想法也正常。一乐</strong></p>
<p><strong>然后又突然想到第一句，心情顿时好了不少。</strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>博客迁移记</title>
      <link>https://euds63.github.io/2023/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%AE%B0/</link>
      <pubDate>Sat, 21 Oct 2023 12:50:17 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%AE%B0/</guid>
      <description>nice to use Hugo</description>
      <content:encoded><![CDATA[<ol>
<li>尝试修改代码栏背景，无果</li>
<li>更换主题至<a href="https://reorx.github.io/hugo-PaperModX/"  target="_blank" rel="noopener" >PaperModX</a></li>
<li>设置文章中链接以新标签的方式打开
参考：<a href="https://dvel.me/posts/hugo-goldmark-markdown-new-tab/"  target="_blank" rel="noopener" >在 Hugo Goldmark Markdown 中设置以新标签打开链接 - Dvel&rsquo;s Blog</a></li>
<li>统一风格</li>
<li>使用<a href="https://www.jinrishici.com/"  target="_blank" rel="noopener" >今日诗词 - 一言API</a>作为slogan。步骤如下：
<ol>
<li>找到位置，发现位于<code>themes\PaperModX\layouts\partials\home_info.html</code></li>
<li>根据api文档添加调用代码</li>
</ol>
</li>
<li>参考<a href="https://www.sulvblog.cn/posts/blog/hugo_tag_cloud/"  target="_blank" rel="noopener" >Hugo博客添加标签云 | Sulv&rsquo;s Blog</a>美化标签页</li>
<li>添加archive页。步骤如下：
<ol>
<li>新增archive.md文件</li>
<li>在<code>themes\PaperModX\assets\css\common\archive.css</code>替换并添加相应代码
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl">  <span class="p">.</span><span class="nc">archive-entry</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">padding</span><span class="p">:</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">transition</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">link</span><span class="o">-</span><span class="n">transition</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="c">/* 添加过渡效果，使颜色和阴影变化平滑 */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nc">archive-entry</span><span class="p">:</span><span class="nd">hover</span> <span class="p">.</span><span class="nc">archive-entry-title</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">link</span><span class="o">-</span><span class="n">hover</span><span class="o">-</span><span class="kc">color</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="c">/* 鼠标悬停时的文字颜色 */</span>
</span></span><span class="line"><span class="cl">     <span class="k">box-shadow</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">link</span><span class="o">-</span><span class="n">hover</span><span class="o">-</span><span class="kc">underline</span><span class="o">-</span><span class="n">shadow</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="c">/* 鼠标悬停时的下划线阴影效果 */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nc">archive-entry-title</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">margin</span><span class="p">:</span> <span class="mi">5</span><span class="kt">px</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">font-weight</span><span class="p">:</span> <span class="mi">400</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">transition</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">link</span><span class="o">-</span><span class="n">transition</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="k">display</span><span class="p">:</span> <span class="kc">inline-block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div></li>
</ol>
</li>
<li>添加搜索功能，步骤如下
<ol>
<li>新增search.md文件</li>
<li>在<code>hugo.yml</code>新增
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">outputs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">home</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span>- <span class="l">HTML</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span>- <span class="l">RSS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span>- <span class="l">JSON</span><span class="w"> </span><span class="c"># is necessary</span><span class="w">
</span></span></span></code></pre></div></li>
</ol>
</li>
<li>整合search,category,tags至discover，以使导航栏更为简洁，步骤如下
<ol>
<li>参考<a href="https://loyayz.com/website/220609-hugo-papermodx-tags-in-search-page/"  target="_blank" rel="noopener" >PaperMod 搜索页展示标签列表 | loyayz</a></li>
<li>修改对应标题、url</li>
<li>修改<code>themes\PaperModX\layouts\_default\search.html</code>中的代码</li>
</ol>
</li>
<li>修改profile-mode中的副标题为一言诗句，步骤如下:
<ol>
<li>找到对应位置<code>themes\PaperModX\layouts\partials\index_profile.html</code></li>
<li>参考第五步</li>
</ol>
</li>
<li>添加Records页面，步骤如下
<ol>
<li>参考<a href="https://eallion.com/neodb/#back-to-top"  target="_blank" rel="noopener" >NeoDB API 创建观影页面 - 大大的小蜗牛</a></li>
<li>添加<code>themes\PaperModX\layouts\_default\records.html</code>与<code>static\css\records.css</code></li>
<li>添加<code>content\records.md</code></li>
</ol>
</li>
<li>添加rss_subscription页面，步骤如下
<ol>
<li>大体上与第11步相同</li>
<li>在<code>themes\PaperModX\layouts\_default\single.html</code>的基础上进行修改，得到<code>themes\PaperModX\layouts\_default\rss_subscription.html</code></li>
</ol>
</li>
<li>部署
参考<a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/"  target="_blank" rel="noopener" >Host on GitHub Pages | Hugo</a></li>
<li>添加social icons
参考<a href="https://adityatelange.github.io/hugo-PaperMod/posts/papermod/papermod-icons/"  target="_blank" rel="noopener" >Icons | PaperMod</a></li>
</ol>
<h2 id="待修复问题">待修复问题</h2>
<ol>
<li><input checked="" disabled="" type="checkbox"> 部署后<a href="https://ds63.eu.org/rss_subscription/"  target="_blank" rel="noopener" >My Rss Subscription | EuDs&rsquo;s Blog</a>无法正常显示</li>
<li><input checked="" disabled="" type="checkbox"> 网站icon时有时无</li>
</ol>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://liujiacai.net/blog/2020/12/05/hexo-to-hugo/#headline-3"  target="_blank" rel="noopener" >博客系统迁移：Hexo 到 Hugo</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1702561"  target="_blank" rel="noopener" >将hexo文章头转为hugo格式-腾讯云开发者社区-腾讯云</a></li>
<li><a href="https://io-oi.me/tech/hugo-vs-hexo/"  target="_blank" rel="noopener" >Hugo 与 Hexo 的异同 | reuixiy</a></li>
<li><a href="https://www.sulvblog.cn/posts/blog/hugo_toc_side/"  target="_blank" rel="noopener" >Hugo博客目录放在侧边 | PaperMod主题 | Sulv&rsquo;s Blog</a></li>
<li><a href="https://hugo.aiaide.com/post/hugo%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"  target="_blank" rel="noopener" >Hugo的工作原理 - Hugo 中文帮助文档</a></li>
<li><a href="https://www.sulvblog.cn/posts/blog/hugo_tag_cloud/"  target="_blank" rel="noopener" >Hugo博客添加标签云 | Sulv&rsquo;s Blog</a></li>
<li><a href="https://www.fusejs.io/api/options.html#keys"  target="_blank" rel="noopener" >Options | Fuse.js</a></li>
<li><a href="https://loyayz.com/website/220609-hugo-papermodx-tags-in-search-page/"  target="_blank" rel="noopener" >PaperMod 搜索页展示标签列表 | loyayz</a></li>
<li><a href="https://eallion.com/neodb/#back-to-top"  target="_blank" rel="noopener" >NeoDB API 创建观影页面 - 大大的小蜗牛</a></li>
<li><a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/"  target="_blank" rel="noopener" >Host on GitHub Pages | Hugo</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>qqBot 搭建</title>
      <link>https://euds63.github.io/2023/qqbot-%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 11 Oct 2023 01:23:34 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/qqbot-%E6%90%AD%E5%BB%BA/</guid>
      <description>短时间内也不想再进一步折腾了</description>
      <content:encoded><![CDATA[<h1 id="qqbot-搭建">qqBot 搭建</h1>
<p><strong>这两天在搭qqBot，记录一下</strong></p>
<h2 id="整体技术">整体技术</h2>
<p>我使用的是<a href="https://github.com/Mrs4s/go-cqhttp"  target="_blank" rel="noopener" >go-cqhttp</a>和<a href="https://github.com/nonebot/nonebot2"  target="_blank" rel="noopener" >nonebot2</a>。</p>
<p>在遇到风控问题时，我使用了<a href="https://github.com/fuqiuluo/unidbg-fetch-qsign"  target="_blank" rel="noopener" >unidbg-fetch-qsign</a>。</p>
<h2 id="过程">过程</h2>
<ul>
<li>
<p>整个过程比我着手搭建前所想的要困难许多，踩了许多坑。不过很棒的一点是，这三个项目的issue都十分活跃。我踩的坑，在issue中几乎都能搜到。我使用过的开源项目不多，但这三个给了我很好的印象，希望自己以后能做些自己的贡献。</p>
</li>
<li>
<p>之前没想到最难的一点不是机器人程序的编写，而在于登录。我使用的号是新号（创建一个礼拜左右），风控等级比较高。</p>
</li>
</ul>
<p>而我的需求是：将bot部署在地点在非我所在地的一个服务器上，这更是增加了被风控的概率。</p>
<p>尝试许多种方法后，我最终的解决方法是：</p>
<ol>
<li>在本地先使用手表协议扫码登录。( <code>&quot;sort_version_name&quot;:8.9.73</code>,<code>protocol：2</code>)</li>
<li>成功登录后将得到的文件移至服务器上并配置<code>signsever</code>,再次进行登录</li>
</ol>
<ul>
<li>
<p>但最后bot还是被风控，无法发送群消息。</p>
<p>我短时间内也不想再进一步折腾了。</p>
</li>
<li>
<p>今天把自己写的插件<a href="https://github.com/EuDs63/nonebot-plugin-yesman"  target="_blank" rel="noopener" >EuDs63/nonebot-plugin-yesman: nonebot2 插件</a>发布到<a href="https://nonebot.dev/store/plugins"  target="_blank" rel="noopener" >插件商店 | NoneBot</a>了。过了一遍插件发布的流程，还蛮有意思的。有几点值得说下:</p>
<ol>
<li><a href="https://pypi.org/account/register/"  target="_blank" rel="noopener" >Create an account · PyPI</a>的username要求是我见过的最苛刻的。但也能理解。
<blockquote>
<p>Choose a strong password that contains letters (uppercase and lowercase), numbers and special characters. Avoid common words or repetition.</p>
</blockquote>
</li>
<li><a href="https://github.com/apps/noneflow"  target="_blank" rel="noopener" >About NoneFlow</a> 好强大。有机会想自己试试写一个类似的，或者了解是怎么做到的。</li>
</ol>
</li>
</ul>
<h2 id="感想">感想</h2>
<ol>
<li>想起搭telegram bot时，只需要申请一个token，甚至教程官方都有在写。而这里却是道高一尺魔高一丈般的猫鼠游戏。不免五味杂陈。</li>
<li>nonebot这种插件系统我觉得很棒。省了不少力气。</li>
<li>感觉qqBot可玩性还是蛮高的，在其他群里也常常能见到些有趣的bot。但可惜的是腾讯的态度。</li>
</ol>
<h2 id="收获">收获</h2>
<ol>
<li><code>nohup</code></li>
</ol>
<ul>
<li>使用: 例: <code>nphup nb run</code></li>
<li>关闭: 例:
<code>ps aux | grep `nb` #找到对应的进程号 kill $进程号</code></li>
</ul>
<ol start="2">
<li>
<p><code>守护进程（Systemd）</code></p>
<p><em>注：以下复制自<a href="https://blog.cysi.me/2022/04/make-a-qqbot.html#%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8Bsystemd"  target="_blank" rel="noopener" >使用 NoneBot2 和 go-cqhttp 打造自己的 FF14 QQ 机器人</a></em></p>
<ul>
<li>创建</li>
</ul>
<pre tabindex="0"><code># vim /lib/systemd/system/go-cqhttp.service

    [Unit]
    Description=GO-CQHTTP
    Wants=network-online.target
    After=network-online.target
    [Service]
    Type=simple
    User=root
    WorkingDirectory= GO-CQHTTP的运行目录
    ExecStart= nohup go-cqhttp
    KillMode=process

    [Install]
    WantedBy=multi-user.target
</code></pre><ul>
<li>使用</li>
</ul>
<pre tabindex="0"><code>systemctl status go-cqhttp #查看状态
systemctl enable go-cqhttp #启用开机自启
systemctl restart go-cqhttp #重启进程
systemctl stop go-cqhttp #停止进程
systemctl start go-cqhttp #开始进程
</code></pre></li>
<li>
<p>python虚拟环境</p>
<ul>
<li>新建</li>
</ul>
<pre tabindex="0"><code>python -m venv myenv # 创建一个名为myenv的虚拟环境
</code></pre><ul>
<li>激活</li>
</ul>
<pre tabindex="0"><code>source ./qqVenv/bin/activate # bash

source ./qqVenv/bin/activate.fish # fish
</code></pre></li>
</ol>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://github.com/nonebot/nonebot2"  target="_blank" rel="noopener" >nonebot/nonebot2: 跨平台 Python 异步聊天机器人框架 / Asynchronous multi-platform chatbot framework written in Python</a></li>
<li><a href="https://github.com/fuqiuluo/unidbg-fetch-qsign"  target="_blank" rel="noopener" >fuqiuluo/unidbg-fetch-qsign: 获取QQSign通过Unidbg</a></li>
<li><a href="https://blog.cysi.me/2022/04/make-a-qqbot.html#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6"  target="_blank" rel="noopener" >使用 NoneBot2 和 go-cqhttp 打造自己的 FF14 QQ 机器人</a></li>
<li><a href="https://github.com/Mrs4s/go-cqhttp"  target="_blank" rel="noopener" >Mrs4s/go-cqhttp: cqhttp的golang实现，轻量、原生跨平台.</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>game of life</title>
      <link>https://euds63.github.io/2023/game-of-life/</link>
      <pubDate>Thu, 05 Oct 2023 16:04:39 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/game-of-life/</guid>
      <description>记录EuDs63/game_of_life</description>
      <content:encoded><![CDATA[<h2 id="起因">起因</h2>
<p>大一的时候做某次课程作业，我的选题就是life of game。从那时候就想自己实现一个。但一直搁置着没有动手，最近在学Rust，并正好看到了篇<a href="https://rustwasm.github.io/docs/book/introduction.html"  target="_blank" rel="noopener" >很不错的教程</a>。这便是这个项目的起因。</p>
<h2 id="历程">历程</h2>
<h3 id="前期准备">前期准备</h3>
<p>我使用的环境是vecode+wsl2。整体下来除了因为机器性能限制导致内存占用过高，体验还是很可以的。</p>
<p>但在搭建项目环境时踩了三个坑。</p>
<ol>
<li><em>npm install 失败</em></li>
</ol>
<ul>
<li>解决：在Ubuntu中安装npm</li>
<li>参考：<a href="https://blog.csdn.net/hys__handsome/article/details/125687617"  target="_blank" rel="noopener" >WSL无法使用npm</a></li>
</ul>
<ol start="2">
<li><em>wasm-build 失败</em></li>
</ol>
<ul>
<li>解决
<pre tabindex="0"><code>[package.metadata.wasm-pack.profile.release]
wasm-opt = false
</code></pre></li>
<li>参考：<a href="https://github.com/rustwasm/wasm-pack/issues/864"  target="_blank" rel="noopener" >failed to download binaryen-version_90-x86-windows.tar.gz</a></li>
</ul>
<ol start="3">
<li><em>wasm-pack test &ndash;chrome &ndash;headless 失败</em></li>
</ol>
<ul>
<li>解决: 改用<code>wasm-pack test --chrome</code></li>
<li>参考： <a href="https://github.com/rustwasm/wasm-pack/issues/611"  target="_blank" rel="noopener" >Headless Chrome test fails</a></li>
</ul>
<h3 id="编码">编码</h3>
<p>编码阶段跟着教程来，还算顺利。但教程中的代码是全部堆放在一起的。这看起来不太舒服，也不太适合我后续的迭代。我花了些时间将其组件化。但教程的后面也有说明没有组件化的理由：Shrinking .wasm Size。这让我意识到还是要根据项目的特点来去做对应的优化和修改。</p>
<h3 id="部署">部署</h3>
<p>开发时，我发现<a href="https://github.com/shalzz/wasm-game-of-life"  target="_blank" rel="noopener" >shalzz/wasm-game-of-life</a>提供了一个live demo。是使用vercel进行部署的。vercel之前我也有使用过，但只是用的别人的一键部署。我觉得蛮有意思的，于是决定也试试。着实花了些时间，踩了不少坑。这里展开说下过程。</p>
<ol>
<li>一开始参考<a href="https://betterprogramming.pub/deploying-a-wasm-powered-react-app-on-vercel-cf3cae2a75d6"  target="_blank" rel="noopener" >Deploying a WASM-Powered React App on Vercel</a>。后来发现不需要这么麻烦，因为我已经<code>wasm-pack pulish</code>了，可以直接将<a href="https://www.npmjs.com/package/wasm-game-of-life-euds63"  target="_blank" rel="noopener" >wasm-game-of-life-euds63 - npm</a>作为依赖引入。这样就只需要部署webpack，而不用再去安装Rust相关的内容。</li>
<li>对代码进行对应的修改后。我开始尝试部署。先是遇到路径问题，我将<code>Root Directory</code>修改为www。</li>
<li>这时候vercel显示部署成功了，但实际上是运行不了的。我因着之前的经验，惯性地以为也是路径问题。开始修改其他地方的路径。但实际上不是。反复修改几次后我发现:错误的路径会导致部署成功，而正确的路径反而会使<code>npm install</code>报错。而我一开始以为的错误路径是正确的。 这一步我觉得还是我没有好好去看log导致的。</li>
<li>根据相应的报错发现是node版本问题。我本地运行成功的node版本是12，而vercel只支持18和16，我一开始的想法是另外安装一个12的版本，未果。后来报着试一试的念头改为16，惊喜的是<code>npm install</code>成功了。</li>
<li><code>npm run build</code>后报错：Missing Public Directory。根据<a href="https://vercel.com/docs/errors/error-list#missing-public-directory"  target="_blank" rel="noopener" >Error List | Vercel Docs</a>尝试将<code>Output Directory</code>设为dist，解决。</li>
</ol>
<h3 id="配置域名">配置域名</h3>
<p>我使用了子域名的方式进行配置。之前觉得配置子域名蛮神奇的。自己尝试后发现，似乎是相当于一个redirect？</p>
<p>我先在我使用的DNS服务提供商处添加了一条CNAME记录。</p>
<table>
<thead>
<tr>
<th>SUBDOMAIN</th>
<th>TYPE</th>
<th>VALUE</th>
<th>TTL, SEC</th>
</tr>
</thead>
<tbody>
<tr>
<td>lifegame</td>
<td>CNAME</td>
<td>game-of-life-2hpx.vercel.app</td>
<td>86400</td>
</tr>
</tbody>
</table>
<p>然后在vercel的对应项目中的Domains新增域名lifegame.ds63.eu.org。</p>
<p>一开始设置好的是没有ssl证书。网上查了些资料，发现vercel是会自动提供ssl证书的。还以为是自己哪里设置出问题了。结果是得等一会儿才行。</p>
<h2 id="收获">收获</h2>
<ol>
<li>Rust自定义宏
<ul>
<li>步骤
<ol>
<li>在一个模块中定义并导出自定义宏
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Rust" data-lang="Rust"><span class="line"><span class="cl"><span class="c1">// utils.rs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#[macro_export]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">macro_rules</span><span class="o">!</span><span class="w"> </span><span class="n">log</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="p">(</span><span class="w"> </span><span class="cp">$(</span><span class="w"> </span><span class="cp">$t</span>:<span class="nc">tt</span><span class="w"> </span><span class="p">)</span><span class="o">*</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">web_sys</span>::<span class="n">console</span>::<span class="n">log_1</span><span class="p">(</span><span class="o">&amp;</span><span class="fm">format!</span><span class="p">(</span><span class="w"> </span><span class="cp">$(</span><span class="w"> </span><span class="cp">$t</span><span class="w"> </span><span class="p">)</span><span class="o">*</span><span class="w"> </span><span class="p">).</span><span class="n">into</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div></li>
<li>在其他模块中使用
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Rust" data-lang="Rust"><span class="line"><span class="cl"><span class="c1">// lib.rs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#[macro_use]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">mod</span> <span class="nn">utils</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">mod</span> <span class="nn">universe</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// universe.rs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">use</span><span class="w"> </span><span class="k">crate</span>::<span class="n">utils</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// 直接使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="fm">log!</span><span class="p">(</span><span class="s">&#34;This is a log message: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">some_variable</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div></li>
</ol>
</li>
</ul>
</li>
<li>Always let profiling guide your focus
<ul>
<li>一些检测性能工具
<ol>
<li>edge开发者工具 -&gt; 性能</li>
<li><code>cargo benchcmp</code></li>
<li><code>perf</code></li>
</ol>
</li>
<li><a href="https://rustwasm.github.io/docs/book/game-of-life/time-profiling.html"  target="_blank" rel="noopener" >Time Profiling - Rust and WebAssembly</a>这章值得再读几次</li>
</ul>
</li>
<li>vercel部署</li>
</ol>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://rustwasm.github.io/docs/book/introduction.html"  target="_blank" rel="noopener" >Rust and WebAssembly</a></li>
<li><a href="https://playgameoflife.com/"  target="_blank" rel="noopener" >Play John Conway’s Game of Life</a> 目前发现的最好的一个game of life实现</li>
<li><a href="https://github.com/shalzz/wasm-game-of-life"  target="_blank" rel="noopener" >shalzz/wasm-game-of-life: Game of Life implementation using Rust, Javascript and WebAssembly!</a></li>
<li><a href="https://vercel.com/docs/projects/overview#ignored-build-step"  target="_blank" rel="noopener" >Projects Overview | Vercel Docs</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>暑期项目的感悟</title>
      <link>https://euds63.github.io/2023/%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%84%9F%E6%82%9F/</link>
      <pubDate>Wed, 13 Sep 2023 16:00:12 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%84%9F%E6%82%9F/</guid>
      <description>没有银弹</description>
      <content:encoded><![CDATA[<p>这次暑期学校的一个月时间都是用来开发一个项目。说是一个月，但实际用来编码的时间大约在三个星期。更具体的时间是早上八点半到下午五点半。最后这一个礼拜晚上也会拿来编码。</p>
<p>三个礼拜的时间说多不多，但这种经历倒是少有，踩了不少坑，也有不少收获，这里记录一下。</p>
<h2 id="学习新技术">学习新技术</h2>
<p>这次用的几个技术栈都是之前没有接触过的：前端React，后端Flask。项目后期还引入了Redux和useSWR。</p>
<p>我对学习新技术倒是蛮有热情，之所以选用这些也是出于想尝试些之前所没有接触过的事物。并且这次用到的技术栈，上手也都是比较容易的，除了Redux现在还是云里雾里，所以整体的开发体验下来并不会因为都是自己没接触过的技术而寸步难行。</p>
<p>但我还是发现了一个蛮大的问题：因为要赶最后的ddl，所以比较偏向于急于求成，看了看用法和示例就开始写了，虽然最后也确实能写出点东西，但总有种半生不熟的感觉，没有一种确确实实掌握的踏实感。</p>
<p>我还意识到，一个人的时间和精力是有限的，而技术却是日新月异的。所谓庄子所说的：吾生也有涯，而知也无涯。所谓贪多嚼不烂，就是这个道理。</p>
<h2 id="dry与aha">DRY与AHA</h2>
<p>这次项目中，后端几乎是我在负责的。但就是这样一个自己在开发的两千行左右的代码，到第三周的时候就还是偶尔会冒出想推倒重写某个部分的想法。</p>
<p>尤其是action这个部分。在这个项目中，我将用户收藏、评分、评论这三个功能抽象成一个action。自己刚开始写的时候还有点沾沾自喜，认为自己是做到了合理的内聚。</p>
<p>但后来却发现其中的弊端：当我想单独修改其中某一部分，因为其耦合性，导致我需要修改一些本不需要修改的代码。而到了项目后期，前端已经和后端对接已经完成百分之八九十。这时候修改一个核心功能，可谓是牵一发而动全身。改是能改，但是却不敢改，因为承担不起所需的时间成本。最后的解决方式是另外又写了几个方法，这就导致代码变得很丑。这时候就真切体验到了垒屎山是一种什么样的心情了。</p>
<p>回顾过去，思考如何在以后能尽量避免这种情况，我想有两个原则可能会起作用：</p>
<ol>
<li>DRY
&ldquo;Don&rsquo;t repeat yourself&quot;的缩写。我虽然有意识去将一些常用的代码封装为一个方法。但还是有不少代码，我选择了直接复制粘贴原有可用代码，并在其基础上进行些许修改。这样子固然省事，写的时候也很畅快，但后期想要修改时，却就要之前的偷懒付出相当的代价。而如若我之前多花些时间，将其封装，这样我的代码也就更方便修改。</li>
<li>AHA
&ldquo;avoid hasty abstractions&quot;的缩写。这个原则让我不禁想到一句话&quot;premature optimization is root of all evil&rdquo;。还是以action为例，如果我在将三个操作耦合成一个时多想一想，那会好许多。但话又说回来，怎么样才算是不仓促，怎么样才算不是过早。我觉得现阶段的我还是缺乏经验，所以下次遇到类似的情况时，我想我大概率还是会为自己的某个小聪明而沾沾自喜，并毫不犹豫地踏进给自己挖的又一个坑。</li>
</ol>
<h2 id="项目流程">项目流程</h2>
<p>这次的流程是采用瀑布模式，相比于上学期所使用的Scrum总觉得不得劲。我个人感觉最大的差异是在项目前期，连续多天都是花在写一些比较虚的文档。而这些文档：需求文档，设计文档之类，我们这几个甚至连初出茅庐都还不算的新人，没办法考虑得那么周到。而且多日时间上的付出只是一些文字，这样的体验感实在不好。</p>
<p>总的来说，这样的经历在我的学生阶段中算是比较一个独特的经历，一个月的时间也没有怎么白白浪费掉，对自己还是较为满意的。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Rust_Learning</title>
      <link>https://euds63.github.io/2023/rust_learning/</link>
      <pubDate>Tue, 18 Jul 2023 16:25:21 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/rust_learning/</guid>
      <description>no panic</description>
      <content:encoded><![CDATA[<h1 id="rust_learning">Rust_Learning</h1>
<p><strong>记录我的Rust学习</strong></p>
<h2 id="cargo使用">Cargo使用</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cargo new
</span></span><span class="line"><span class="cl">cargo build 
</span></span><span class="line"><span class="cl">cargo run
</span></span><span class="line"><span class="cl">cargo check
</span></span><span class="line"><span class="cl">cargo doc --open <span class="c1">#build documentation provided by all your dependencies locally and open it in your browser</span>
</span></span></code></pre></div><h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://course.rs/"  target="_blank" rel="noopener" >Rust语言圣经</a></li>
<li><a href="https://rust-book.cs.brown.edu/"  target="_blank" rel="noopener" >The Rust Programming Language</a></li>
<li><a href="https://zh.practice.rs/"  target="_blank" rel="noopener" >Rust语言实战</a></li>
<li><a href="https://picklenerd.github.io/"  target="_blank" rel="noopener" >PNGme</a></li>
</ul>
<h2 id="rust特点">Rust特点</h2>
<ul>
<li>Patterns and the match construct</li>
<li>a strong, static type system.</li>
<li>type inference</li>
<li>shadow</li>
<li>Rust uses the term panicking when a program exits with an error</li>
<li>requiring type annotations in function definitions</li>
<li>Rust&rsquo;s goal is to compile programs into efficient binaries that <em>require as few runtime checks as possible</em></li>
<li>A foundational goal of Rust is to ensure that your programs never have undefined behavior</li>
</ul>
<h2 id="chapter3-common-programming-concepts">Chapter3 Common Programming Concepts</h2>
<ul>
<li>constant v.s. variable
<ol>
<li>Constants aren’t just immutable by default;they’re always immutable.</li>
<li>Constants can be declared in any scope</li>
<li>Constants may be set only to a constant expression, not the result of a value that could only be computed at runtime.</li>
</ol>
</li>
<li>shadow ends until
<ol>
<li>it itself is shadowed</li>
<li>the scope ends</li>
</ol>
</li>
<li>Integer division truncates toward zero to the nearest integer</li>
<li>tuple和array区别
<ol>
<li>tuple的各类型可以不同；</li>
<li>array的大小固定,在定义时就指定了</li>
<li>tuple更灵活,可存储不同类型,一般用于临时组合数据</li>
<li>array大小固定,用于存储大量相同类型的数据</li>
</ol>
</li>
<li>expression and statement
<ol>
<li>Expressions do not include ending semicolons</li>
<li>statement does not return a value</li>
<li>the return value of the function is synonymous with <em>the value of the final expression in the block of the body of a function</em></li>
</ol>
</li>
<li>Control Flow
<ol>
<li>This means the values that have the potential to be results from each arm of the if must be the same type</li>
<li>Rust does not have a concept of &ldquo;truthy&rdquo; or &ldquo;falsy&rdquo; values.So <em>The condition to an if-expression must be a boolean</em></li>
</ol>
</li>
</ul>
<h2 id="chapter4-understanding-ownship">Chapter4 Understanding Ownship</h2>
<ul>
<li>The stack holds data associated with a specific function, while the heap holds data that can outlive a function</li>
<li>Rust does not allow programs to manually deallocate memory. That policy avoids the kinds of undefined behaviors shown above.</li>
<li>Box deallocation principle : If a variable owns a box, when Rust deallocates the variable&rsquo;s frame, then Rust deallocates the box&rsquo;s heap memory.</li>
<li>Moved heap data principle: if a variable x moves ownership of heap data to another variable y, then x cannot be used after the move.</li>
<li>A reference is a kind of pointer.</li>
<li>Rust implicitly inserts dereferences and references in certain cases, such as calling a method with the dot operator</li>
<li><em>Pointer Safety Principle</em>: data should never be aliased and mutated at the same time.</li>
<li>Permissions are defined on <em>paths</em> and not just variables. A path is anything you can put on the left-hand side of an assignment.</li>
<li>Creating a reference to data (&quot;<em>borrowing</em>&quot; it) causes that data to be temporarily read-only until the reference is no longer used.</li>
<li>Rust&rsquo;s borrow checker does not contain different paths for a[0], a[1], and so on. It uses a single path a[_] that represents all indexes of a.</li>
<li>Slices are special kinds of references because they are &ldquo;fat&rdquo; pointers, or pointers with metadata. Here, the metadata is the length of the slice.</li>
</ul>
<h3 id="总结">总结</h3>
<ul>
<li>优势
<ol>
<li>improving runtime performance by avoiding garbage collection</li>
<li>improving predictability by preventing accidental &ldquo;leaks&rdquo; of data.</li>
</ol>
</li>
<li>Pointers can be created through
<ol>
<li>boxes (pointers owning data on the heap)</li>
<li>references (non-owning pointers).</li>
</ol>
</li>
<li>move v.s. borrow
<ul>
<li>A move of a variable with a non-copyable type (like Box<!-- raw HTML omitted --> or String) requires the RO permissions, and the move eliminates all permissions on the variable. That rule prevents the use of moved variables:</li>
<li>Borrowing a variable (creating a reference to it) temporarily removes some of the variable&rsquo;s permissions
<ul>
<li>An immutable borrow creates an immutable reference, and also <em>disables the borrowed data from being mutated or moved.</em></li>
<li>A mutable borrow creates a mutable reference, which* disables the borrowed data from being read, written, or moved*</li>
</ul>
</li>
</ul>
</li>
<li>use-after-free: <em>Immutable borrows</em> remove the W permission to avoid use-after-free,</li>
<li>double-frees: Dereferences of references to non-copyable data do not have the O permission to avoid double-frees</li>
</ul>
<h2 id="chapter5-struct">Chapter5 Struct</h2>
<ul>
<li>Rust <em>does not have a keyword for constructor functions</em>. The idiomatic way to define a constructor function is to make an associated function called new, but that is not enforced by the language.</li>
<li>tuple struct. e.g. <code>struct Color (i32,i32,i32);</code></li>
<li>Rust will insert as many references and dereferences as needed to make the types match up for the self parameter</li>
<li>Rust does not auto-derive Copy for stability across API changes. <code>#[derive(Copy, Clone)]</code></li>
<li>when you see an error like &ldquo;cannot move out of *self&rdquo;, that&rsquo;s usually because you&rsquo;re trying to call a self method on a reference like &amp;self or &amp;mut self. Rust is protecting you from a double-free</li>
</ul>
<h2 id="chapter6-enum">Chapter6 Enum</h2>
<ul>
<li>advantage to using an enum rather than a struct:</li>
</ul>
<ol>
<li>each variant can have different types and amounts of associated data</li>
<li>the name of each enum variant that we define also becomes a function that constructs an instance of the enum</li>
<li>you can put any kind of data inside an enum variant: strings, numeric types, or structs, for example. You can even include another enum</li>
</ol>
<ul>
<li>
<p>The Option Enum</p>
<ol>
<li>the compiler can check whether you’ve handled all the cases you should be handling</li>
<li>a null is a value that is currently invalid or absent for some reason.</li>
<li>Rust does not have nulls, but it does have an enum that can encode the concept of a value being present or absent.</li>
<li>The function Option::unwrap expects <em>self</em>, meaning it expects <em>ownership</em> of arg. However arg is an <em>immutable reference</em> to an option, so it cannot provide ownership of the option.</li>
</ol>
</li>
<li>
<p>match</p>
</li>
<li>
<p>Each match is tried from top to bottom</p>
</li>
<li>
<p>opt is a plain enum — its type is Option<!-- raw HTML omitted --> and not a reference like &amp;Option<!-- raw HTML omitted -->. Therefore a match on opt will move non-ignored fields like s.</p>
</li>
<li>
<p>If we want to peek into opt without moving its contents, the idiomatic solution is to match on a reference:</p>
</li>
<li>
<p><code>if let</code></p>
<ul>
<li>if let as syntax sugar for a match that runs code when the value matches one pattern and then ignores all other values.</li>
<li>The block of code that goes with the else is the same as the block of code that would go with the _ case in the match expression that is equivalent to the if let and else</li>
</ul>
</li>
</ul>
<h2 id="chapter7-managing-growing-projects-with-packages-crates-and-modules">Chapter7 Managing Growing Projects with Packages, Crates, and Modules</h2>
<h3 id="packages-a-cargo-feature-that-lets-you-build-test-and-share-crates">Packages: A Cargo feature that lets you build, test, and share crates</h3>
<ul>
<li>a bundle of one or more crates that provides a set of functionality.</li>
<li>A package can contain as many binary crates as you like, but at most only one library crate.</li>
<li>Using External Packages
<ol>
<li>the standard std library is also a crate that’s external to our package.we <em>don’t</em> need to change Cargo.toml to include std. But <em>we do need to refer to it</em> with use to bring items from there into our package’s scope</li>
</ol>
</li>
</ul>
<h3 id="crates-a-tree-of-modules-that-produces-a-library-or-executable">Crates: A tree of modules that produces a library or executable</h3>
<ul>
<li>Binary create: must have a function called <code>main</code></li>
<li>Library crates : define functionality intended to be shared with multiple projects.
Rustaceans say “crate”, they mean library crate, and they use “crate” interchangeably with the general programming concept of a <em>“library&quot;</em>.</li>
</ul>
<h3 id="modules-and-use-let-you-control-the-organization-scope-and-privacy-of-paths">Modules and use: Let you control the organization, scope, and privacy of paths</h3>
<ul>
<li>用处
<ol>
<li>let us organize code within a crate for readability and easy reuse</li>
<li>allow us to control the privacy of items, because code within a module is private by default</li>
</ol>
</li>
<li>parent and child
<ol>
<li>all items (functions, methods, structs, enums, modules, and constants) <em>are private to parent modules</em> by default.</li>
<li>Items in a parent module can’t use the private items inside child modules, but items in child modules can use the items in their ancestor modules.</li>
</ol>
</li>
</ul>
<h3 id="paths-a-way-of-naming-an-item-such-as-a-struct-function-or-module">Paths: A way of naming an item, such as a struct, function, or module</h3>
<ul>
<li>the idiomatic way
<ol>
<li>Bringing the function’s parent module into scope with use</li>
<li>when bringing in structs, enums, and other items with use, it’s idiomatic to specify the full path</li>
</ol>
</li>
<li><code>use std::io::Result as IoResult;</code></li>
<li>we can use nested paths to bring the same items into scope in one line.<code>use std::{cmp::Ordering, io};</code>,<code>use std::io::{self, Write};</code></li>
</ul>
<h2 id="chapter8">Chapter8</h2>
<h3 id="vector">Vector</h3>
<ul>
<li>Reason for a reference to the first element care about changes at the end of the vector
<ol>
<li>adding a new element onto the end of the vector might require allocating new memory and copying the old elements <em>to the new space</em></li>
<li>the reference to the first element would be pointing to <em>deallocated memory</em></li>
</ol>
</li>
<li>Vec::push moves its argument, so s is not usable after calling v.push(s)</li>
<li>When the vector gets dropped, all of its contents are also dropped, meaning the integers it holds will be cleaned up.</li>
</ul>
<h3 id="string">String</h3>
<ul>
<li>the compiler can coerce the &amp;String argument into a &amp;str</li>
<li>Rust strings don’t support indexing to <em>avoid returning an unexpected value and causing bugs that might not be discovered immediately</em></li>
<li>three relevant ways to look at strings from Rust’s perspective
<ol>
<li>bytes</li>
<li>scalar values</li>
<li>grapheme clusters</li>
</ol>
</li>
<li>The best way to operate on pieces of strings is to <em>be explicit about whether you want</em> characters or bytes</li>
<li>&amp;str is a promise that the byte sequence it points to will always be valid UTF-8</li>
</ul>
<h3 id="hash-map">hash map</h3>
<ul>
<li>Hash maps are useful when you want to look up data not by using an index, as you can with vectors, but by using a key that can be of any type</li>
<li>For types that implement the Copy trait, like i32, the values are copied into the hash map. - For <em>owned values</em> like String, the values will be moved and the hash map will be <em>the owner of those values</em></li>
</ul>
<h2 id="chapter10">chapter10</h2>
<h3 id="generic-data-types">Generic Data Types</h3>
<ul>
<li>Rust instead requires you to state the expected capabilities of generic types up front</li>
<li>Without restrictions, a generic type T has no capabilities: it cannot be printed, cloned, or mutated (although it can be dropped).</li>
<li>Rust does not have inheritance-like mechanisms for specializing methods as you might find in an object-oriented language,</li>
<li>Monomorphization is the process of turning generic code into specific code by filling in the concrete types that are used when compiled</li>
<li>const 泛型： <code>const N : usize</code></li>
</ul>
<h3 id="trait">trait</h3>
<ul>
<li>A trait defines functionality a particular type has and can share with other types.</li>
<li>One restriction to note is that we can implement a trait on a type only if at least one of the trait or the type is local to our crate.</li>
<li>Default implementations can call other methods in the same trait, even if those other methods don’t have a default implementation</li>
<li>traits in parameter
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Rust" data-lang="Rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">some_function</span><span class="o">&lt;</span><span class="n">T</span>:<span class="nc">Display</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Clone</span><span class="w"> </span><span class="p">,</span><span class="n">U</span>: <span class="nb">Clone</span> <span class="o">+</span><span class="w"> </span><span class="n">Debug</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span>:<span class="kp">&amp;</span><span class="nc">T</span><span class="p">,</span><span class="n">u</span>:<span class="kp">&amp;</span><span class="nc">U</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">i32</span><span class="p">{}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Clearer Trait Bounds with where Clauses
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span> <span class="nf">some_function</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="n">U</span><span class="o">&gt;</span><span class="p">()(</span><span class="n">t</span>:<span class="kp">&amp;</span><span class="nc">T</span><span class="p">,</span><span class="n">u</span>:<span class="kp">&amp;</span><span class="nc">U</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">i32</span>
</span></span><span class="line"><span class="cl"><span class="nc">where</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">T</span>:<span class="nc">Display</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Clone</span><span class="w"> </span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">U</span>: <span class="nb">Clone</span> <span class="o">+</span><span class="w"> </span><span class="n">Debug</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{}</span><span class="w">
</span></span></span></code></pre></div></li>
<li>can only use impl Trait if you’re returning a single type</li>
<li>Using Trait Bounds to Conditionally Implement Methods
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Rust" data-lang="Rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fmt</span>::<span class="n">Display</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">x</span>: <span class="nc">T</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">y</span>: <span class="nc">T</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">x</span>: <span class="nc">T</span><span class="p">,</span><span class="w"> </span><span class="n">y</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">Self</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Display</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">PartialOrd</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">cmp_display</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">y</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;The largest member is x = </span><span class="si">{}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;The largest member is y = </span><span class="si">{}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">y</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div></li>
<li>conditionally implement a trait for any type that implements another trait
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Rust" data-lang="Rust"><span class="line"><span class="cl"><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span>: <span class="nc">Display</span><span class="o">&gt;</span><span class="w"> </span><span class="nb">ToString</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">T</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">// --snip--
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<h3 id="lifetime">lifetime</h3>
<ul>
<li>Lifetime annotations don’t change how long any of the references live. Rather, they describe the relationships of the lifetimes of multiple references to each other without affecting the lifetimes</li>
<li>the names of lifetime parameters must start with an apostrophe (&rsquo;) and are usually all lowercase and very short</li>
<li>when we specify the lifetime parameters in this function signature, we’re not changing the lifetimes of any values passed in or returned. Rather, we’re specifying that the borrow checker should reject any values that don’t adhere to these constraints.</li>
<li>in early versions (pre-1.0) of Rust,every reference needed an explicit lifetime</li>
<li>The compiler uses <em>three rules</em> to figure out the lifetimes of the references when there aren’t explicit annotations.
<ol>
<li>the compiler assigns a different lifetime parameter to each lifetime in each input type.</li>
<li>if there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime parameters</li>
<li>if there are multiple input lifetime parameters, but one of them is <code>&amp;self</code> or <code>&amp;mut self</code> because this is a <em>method</em>, the lifetime of self is assigned to all output lifetime parameters.</li>
</ol>
</li>
<li>The Static Lifetime <code>'static</code>
<ul>
<li>The string literals is <em>stored directly in the program’s binary</em>, which is always available. Therefore, <em>the lifetime of all string literals is <code>'static</code>.</em></li>
<li>&lsquo;static means &ldquo;live for the entire program&rdquo;, and so data under a static reference must never be deallocated.</li>
</ul>
</li>
<li>生命周期标注并不会改变任何引用的实际作用域</li>
</ul>
<h2 id="chapter11">chapter11</h2>
<h3 id="the-output-from-running-the-automatically-generated-test">The output from running the automatically generated test</h3>
<ul>
<li>The 0 measured statistic is for benchmark tests that measure performance.</li>
<li><code>Doc-tests</code>  is for the results of any documentation tests</li>
</ul>
<h3 id="常用命令">常用命令</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Rust" data-lang="Rust"><span class="line"><span class="cl"><span class="fm">assert!</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">assert_eq!</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">assert_ne</span><span class="o">!</span><span class="w"> </span><span class="c1">//  will pass if the two values we give it are not equal and fail if they’re equal.
</span></span></span></code></pre></div><h3 id="running-tests-in-parallel-or-consecutively">Running Tests in Parallel or Consecutively</h3>
<ul>
<li>When you run multiple tests, <em>by default</em> they run in parallel using threads</li>
<li><code>cargo test -- --test-threads=1</code></li>
<li><code>cargo test -- --show-output</code></li>
<li><code>cargo test --help</code></li>
<li><code>cargo test -- --help</code></li>
<li>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Rust" data-lang="Rust"><span class="line"><span class="cl"><span class="cp">#[test]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[ignore]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">cargo</span><span class="w"> </span><span class="n">test</span><span class="w"> </span><span class="o">--</span><span class="w"> </span><span class="o">--</span><span class="n">ignored</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">cargo</span><span class="w"> </span><span class="n">test</span><span class="w"> </span><span class="o">--</span><span class="w"> </span><span class="o">--</span><span class="n">include</span><span class="o">-</span><span class="n">ignored</span><span class="w">
</span></span></span></code></pre></div></li>
<li>We can specify part of a test name, and <em>any test whose name matches that value</em> will be run.</li>
</ul>
<h3 id="test-organization">test-organization</h3>
<ul>
<li>Unit tests exercise different parts of a library separately and can test private implementation details.</li>
<li>Unit tests exercise different parts of a library separately and can test private implementation details.</li>
</ul>
<h2 id="chapter12">chapter12</h2>
<ul>
<li>in cases where the desired function is nested in more than one module, we’ve chosen to <em>bring the parent module into scope</em> rather than the function.</li>
<li>TDD(Test Driven Develop)</li>
<li>Write a test that fails and run it to make sure it fails for the reason you expect.</li>
<li>Write or modify just enough code to make the new test pass.</li>
<li>Refactor the code you just added or changed and make sure the tests continue to pass.</li>
<li>Repeat from step 1!</li>
</ul>
<h2 id="chapter13">chapter13</h2>
<ul>
<li>Rust will infer the types of arguments/returns for closures, but not top-level functions</li>
<li>Closures can capture values from their environment in three ways
<ol>
<li>borrowing immutably</li>
<li>borrowing mutably</li>
<li>taking ownership.</li>
</ol>
</li>
<li>Fn traits
<ol>
<li>FnOnce</li>
<li>FnMut</li>
<li>Fn</li>
</ol>
</li>
<li>iterator adaptors are lazy, and we need to consume the iterator here.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>《操作系统：设计与实现》笔记</title>
      <link>https://euds63.github.io/2023/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 27 Jun 2023 18:37:47 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/</guid>
      <description>操作系统就是状态机</description>
      <content:encoded><![CDATA[<p><strong><a href="https://space.bilibili.com/202224425/channel/collectiondetail?sid=192498"  target="_blank" rel="noopener" >操作系统：设计与实现 (2022 春季学期)</a>的学习笔记</strong></p>
<h3 id="p3-多处理器编程从入门到放弃-线程库现代处理器和宽松内存模型">p3 多处理器编程：从入门到放弃 (线程库；现代处理器和宽松内存模型)</h3>
<ul>
<li>
<p>并发程序的三个麻烦</p>
<ul>
<li>原子性</li>
<li>顺序</li>
<li>可见性</li>
</ul>
</li>
<li>
<p>gcc 编译</p>
<ul>
<li>不优化,并查看汇编代码
<code>gcc -c -O1 sum.c &amp;&amp; objdump -d sum.o</code></li>
<li><code>asm volatile(&quot;&quot; : : &quot;memory&quot;); // compiler barrier</code></li>
</ul>
</li>
<li>
<p>统计次数
<code> ./a.out | head -n 1000 | sort | uniq -c</code></p>
</li>
<li>
<p>现代处理器</p>
<ul>
<li>也是动态编译器：汇编指令也是由多个uop所组成的。</li>
<li>维护一个uop的“池子” 指令的有向无环图</li>
<li>乱序执行，顺序提交</li>
</ul>
</li>
</ul>
<h3 id="p4-理解并发程序执行-peterson算法模型检验与软件自动化工具">p4 理解并发程序执行 (Peterson算法、模型检验与软件自动化工具)</h3>
<ul>
<li>C语言的形式语义
<ul>
<li>全局变量加多个栈帧；每个栈帧有其局部变量和pc</li>
</ul>
</li>
<li>Peterson算法
<ul>
<li>看上去是谦让的，但其实是自私的</li>
<li>证明正确性：画出状态机
<ul>
<li>困境：不敢不画，不敢乱画</li>
<li>解决： <a href="https://jyywiki.cn/pages/OS/2022/demos/model-checker.py"  target="_blank" rel="noopener" >model-checker</a></li>
<li>把程序的问题变成图论的问题
<ul>
<li>safety 红色状态不可达</li>
<li>liveness : 从任意状态出发，都能到达绿/蓝色状态 强连通分量</li>
</ul>
</li>
</ul>
</li>
<li>许多重要的想法，凝练以后就是概念</li>
</ul>
</li>
<li>并发程序 = 状态机</li>
<li>Python generator
<ul>
<li>e.g.
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">numbers</span><span class="p">(</span><span class="n">init</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">step</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span> <span class="o">=</span> <span class="n">init</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">Trye</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span> <span class="o">+=</span> <span class="n">step</span>
</span></span><span class="line"><span class="cl">    <span class="k">yield</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="fm">__next__</span><span class="p">()</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<h3 id="p5-并发控制互斥-自旋锁互斥锁和-futex">p5 并发控制：互斥 (自旋锁、互斥锁和 futex)</h3>
<ul>
<li>不能解决问题的时候，可以找到所依赖的假设，并大胆地打破它</li>
<li>spin 线程直接共享 locked</li>
<li>mutex 通过系统调用访问 locked</li>
<li>futex(Fast Userspace muTexes)
<ul>
<li>Fast path: 一条原子指令，上锁成功立即返回</li>
<li>Slow path: 上锁失败，执行系统调用睡眠</li>
</ul>
</li>
</ul>
<h2 id="p6-并发控制同步-条件变量信号量生产者-消费者和哲学家吃饭问题">p6 并发控制：同步 (条件变量、信号量、生产者-消费者和哲♂学家吃饭问题)</h2>
<ul>
<li>思考： 有一堆任务，平均切分成n堆。有x个线程负责完成该任务(x &lt; n) 一个线程一次只能完成一个任务，完成后会自动去做下一个任务。要怎么实现？</li>
<li>有万能的方法，就要用万能的方法。
<ul>
<li>他是这样诠释的。当项目代码量不大（一千行以内），项目还是比较好维护的，这时候用写聪明的写法没问题。但当项目到了几万行甚至几百万行时，这时候就需要多个人来进行协作。而人和人之间最大的障碍就是无法完全沟通，理解对方的心意。</li>
<li>不要试图用聪明的办法解决并发问题</li>
<li>个人想法：第一次听这种说法，有一定道理。</li>
</ul>
</li>
<li>万能同步方法 —— 条件变量(Conditional Variables )
<ul>
<li>API
<ul>
<li>wait(cv, mutex) 💤
调用时必须保证已经获得 mutex
释放 mutex、进入睡眠状态</li>
<li>signal/notify(cv) 💬 私信：走起
如果有线程正在等待 cv，则唤醒其中一个线程</li>
<li>broadcast/notifyAll(cv) 📣 所有人：走起
唤醒全部正在等待 cv 的线程</li>
</ul>
</li>
<li>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// 需要等待条件满足时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">cond</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nf">assert</span><span class="p">(</span><span class="n">cond</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1">// 互斥锁保证了在此期间条件 cond 总是成立
</span></span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 其他线程条件可能被满足时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">broadcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">);</span>
</span></span></code></pre></div></li>
<li>debug -&gt; 隔离出bug触发的最小条件</li>
</ul>
</li>
</ul>
<h2 id="p7-真实世界的并发编程-高性能计算数据中心人机交互中的并发编程">p7 真实世界的并发编程 (高性能计算/数据中心/人机交互中的并发编程)</h2>
<ul>
<li>谈block chain &gt; 是个很好的技术。但觉得不太对。因为造成了相当大的资源浪费。</li>
<li><a href="https://www.youtube.com/watch?v=FFftmWSzgmk&amp;ab_channel=Numberphile"  target="_blank" rel="noopener" >What&rsquo;s so special about the Mandelbrot Set? - Numberphile</a></li>
<li><a href="https://github.com/atanunq/viu"  target="_blank" rel="noopener" >atanunq/viu</a></li>
<li>搜索降低了知识的获取成本，ChatGPT等再一次降低了成本。</li>
<li>go语言，编程友好、性能优化</li>
<li>博客是web2.0 的第一步</li>
<li>Ajax (Asynchronous JavaScript + XML)</li>
<li>这次课中讲了三种并发编程，根据不同的需要，实现并发的方式也不同。</li>
</ul>
<h2 id="p8-并发-bug-和应对-死锁数据竞争原子性违反防御性编程和动态分析">p8 并发 bug 和应对 (死锁/数据竞争/原子性违反；防御性编程和动态分析)</h2>
<ul>
<li>软件是需求在计算机数字世界的投影。</li>
<li>assert的使用</li>
<li>没有工具不做系统</li>
<li>premature optimization is root of all evil</li>
<li>编程语言的缺陷——对程序员的完全信任：因为计算资源的宝贵</li>
<li>动态分析工具 <code>-fsanitize</code></li>
<li>Canary msvc 中 debug mode 的canary  <code>(b'\xcc' * 80).decode('gb2312')</code></li>
</ul>
<h2 id="p9-操作系统的状态机模型-操作系统的加载-thread-os-代码讲解">p9 操作系统的状态机模型 (操作系统的加载; thread-os 代码讲解)</h2>
<ul>
<li>大学的真正意义:f将已有的知识和方法重新消化，为大家建立好 “台阶”，在有限的时间里迅速赶上数十年来建立起的学科体系。</li>
</ul>
<h2 id="p10-状态机模型的应用-细胞自动机-gdbrrperf-代码验证工具">p10 状态机模型的应用 (细胞自动机; gdb/rr/perf; 代码验证工具)</h2>
<ul>
<li>分布式系统也是一种并发程序，但要更复杂。因为并发程序假设了每个thread都能正常运行，而分布式系统则要考虑节点丢失的情况。</li>
</ul>
<h2 id="p11-操作系统上的进程-最小-linux-fork-execve-和-exit">p11 操作系统上的进程 (最小 Linux; fork, execve 和 exit)</h2>
<ul>
<li>Linux 操作系统启动流程
CPU Reset → Firmware → Loader → Kernel _start() → 第一个程序 /bin/init → 程序 (状态机) 执行 + 系统调用</li>
<li>Fork Bomb:
<code>:(){:|:&amp;};:</code>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">:<span class="o">()</span> <span class="o">{</span>         <span class="c1"># 格式化一下</span>
</span></span><span class="line"><span class="cl">: <span class="p">|</span> : <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span><span class="p">;</span> :
</span></span></code></pre></div></li>
<li>stdout:
终端: line buffer
pipe , file :full buffer (除非显示地调用fflush)
<pre tabindex="0"><code></code></pre></li>
<li><strong>fork</strong>
<ul>
<li>程序就是状态机，正在执行的程序也是状态机，fork创建状态机的副本；</li>
<li>创建的进程返回+1，子进程返回为0</li>
<li>把所有的寄存器和内存都复制</li>
</ul>
</li>
<li><strong>execve</strong>
<ul>
<li>将当前运行的状态机重置成成另一个程序的初始状态</li>
</ul>
</li>
<li><strong>_exit</strong></li>
</ul>
<h2 id="p12-进程的地址空间-pmap-vdso-mmap-游戏修改器外挂">p12 进程的地址空间 (pmap; vdso; mmap; 游戏修改器/外挂)</h2>
<ul>
<li>端序
<ul>
<li>大端 (big endian): 低地址存放<em>高</em>有效字节</li>
<li>小端 (little endian): 低字节存放<em>低</em>有效字节</li>
</ul>
</li>
<li>工具使用
<ul>
<li>gdb</li>
<li>readelf</li>
<li>pmap</li>
</ul>
</li>
<li>计算机世界没有魔法。因为程序就是状态机。</li>
<li>vdso:不进入操作系统内核，实现系统调用</li>
<li>mmap：</li>
<li>文件=字节序列；内存=字节序列； everything is a file</li>
</ul>
<h2 id="p13-系统调用和-shell-freestanding-shell-终端和-job-control">p13 系统调用和 Shell (freestanding shell, 终端和 job control)</h2>
<ul>
<li>cd是内部命令：改变当前目录是用系统调用实现的</li>
<li><code>strace -f gcc a.c 2&gt;&amp;1 | vim -</code> This will pipe both stdout and stderr to vim. The <code>-</code> argument tells vim to read from stdin.</li>
<li><code>strace pmap 152 |&amp; vim - </code>
<code>|&amp;</code> : This is a shorthand for <code>2&gt;&amp;1 |</code> in bash and zsh. It passes both standard output and standard error of one command as input to another.</li>
<li>fish, zsh 和 bash 都是常用的命令行 shell; sh是比较原始的</li>
<li>clear 清屏</li>
<li><code>,./a.out &amp;</code>  后台执行./a.out</li>
</ul>
<h2 id="p14-c-标准库的实现-系统调用的封装内存空间管理">p14 C 标准库的实现 (系统调用的封装；内存空间管理)</h2>
<ul>
<li>文件描述符还是不理解。印象中这是第二次谈到了&quot;everything is a file&quot;
<ul>
<li>os的对象和对象的访问</li>
</ul>
</li>
<li>gdn的使用
<ul>
<li><code>No symbol table is loaded.  Use the &quot;file&quot; command</code>。可能是编译选项未包含debug信息,如gcc没有添加-g选项。</li>
</ul>
</li>
<li>premature optimization is the root of all evil.</li>
<li>脱离workload谈优化就是耍流氓</li>
<li>经典的设计：
<ul>
<li>fast path</li>
<li>slow path</li>
</ul>
</li>
</ul>
<h2 id="p15-fork-的应用-文件描述符的复制写时复制创建平行宇宙的魔法">p15 fork 的应用 (文件描述符的复制；写时复制；创建平行宇宙的魔法)</h2>
<ul>
<li>fork 状态机复制包括持有的所有操作系统对象</li>
<li>包括持有的所有操作系统对象</li>
<li>文件描述符（file discriptor）
<ul>
<li>一个指向操作系统内对象的 “指针”</li>
<li>dup() 的两个文件描述符是共享 offset</li>
</ul>
</li>
<li>访问空指针也会造成缺页中断</li>
<li>“Copy-on-write” 只有被写入的页面才会复制一份
<ul>
<li>被复制后，整个地址空间都被标记为 “只读”</li>
<li>操作系统捕获 Page Fault 后酌情复制页面</li>
<li>fork-execve 效率得到提升</li>
</ul>
</li>
<li>操作系统会维护每个页面的引用计数</li>
<li>定义进程所占用的内存</li>
<li>page是归os所有的，而非进程</li>
<li>使用fork来搜索并行化。</li>
</ul>
<h2 id="p16-什么是可执行文件-调试信息stack-unwinding静态链接中的重定位">p16 什么是可执行文件 (调试信息；Stack Unwinding；静态链接中的重定位)</h2>
<ul>
<li>可执行文件描述了状态机，是一个描述了状态机的初始状态 + 迁移的数据结构</li>
<li>os没有魔法，所有东西都有解释</li>
<li><code>She-bang</code> <code>#! interpreter [optional-arg]</code></li>
<li>GNU binutils
<ul>
<li>生成可执行文件
<ul>
<li>ld (linker), as (assembler)</li>
<li>ar, ranlib</li>
</ul>
</li>
<li>分析可执行文件
<ul>
<li>objcopy/objdump/readelf</li>
<li>addr2line, size, nm</li>
</ul>
</li>
</ul>
</li>
<li><code>objdump -d a.out | less</code> disasm</li>
<li><code>addr2line 401122 a.out</code></li>
<li>elf: 小精灵；dwarf：矮人</li>
<li>将一个 assembly (机器) 状态映射到 “C 世界” 状态很难</li>
<li>gcc等仍存在着许多不完美</li>
<li>编译器，汇编器，链接器</li>
</ul>
<h2 id="p17-动态链接和加载-静态-elf-加载器实现调试-linux-内核动态链接和加载">p17 动态链接和加载 (静态 ELF 加载器实现；调试 Linux 内核；动态链接和加载)</h2>
<ul>
<li>自定义了一个二进制格式文件</li>
<li>GOT ： global offset table</li>
<li>PLT : procedure linkage table</li>
</ul>
<h2 id="p23-1-bit-数据的存储-延迟线磁芯dramsram磁带磁盘光盘flash-ssd">p23 1-Bit 数据的存储 (延迟线/磁芯/DRAM/SRAM/磁带/磁盘/光盘/Flash SSD)</h2>
<ul>
<li>volatile: 确保该变量的实际值与内存中的值一致,每次读取都是最新值,也禁止编译器对其进行优化。</li>
<li>core dumped 磁性内存年代开始的概念。</li>
<li>局部性原理 -&gt; 可以按照大块来读写</li>
</ul>
<h2 id="p24-输入输出设备模型-串口键盘磁盘打印机总线中断控制器dma-和-gpu">p24 输入输出设备模型 (串口/键盘/磁盘/打印机/总线/中断控制器/DMA 和 GPU</h2>
<ul>
<li>DMA: direct memory access : 一个专门执行&quot;memcpy&quot;程序的cpu</li>
<li>IPC: Instruction per second</li>
<li>GPU:
<ul>
<li>一个通用计算设备</li>
<li>大量并行相似的任务</li>
</ul>
</li>
<li>异构计算：都能做，但选那个最合适的。（jjy在22年说的现在已经能感觉到有相关的趋势了。不过倒不是里面举例的挖矿，而是llm模型）</li>
</ul>
<h2 id="p25-设备驱动程序-linux-设备驱动-gpu-和-cuda-存储设备抽象">p25 设备驱动程序 (Linux 设备驱动; GPU 和 CUDA; 存储设备抽象)</h2>
<ul>
<li>设备抽象成 支持各类操作的对象 (文件)
<ul>
<li>read - 从设备某个指定的位置读出数据</li>
<li>write - 向设备某个指定位置写入数据</li>
<li>ioctl - 读取/设置设备的状态</li>
</ul>
</li>
<li><code>stty -a</code></li>
<li>GPU
<ul>
<li>Single Instruction, Multiple Thread</li>
</ul>
</li>
<li>读优先的正确性</li>
</ul>
<h2 id="p26-文件系统-api-设备在应用间的共享目录和文件-api">p26 文件系统 API (设备在应用间的共享；目录和文件 API)</h2>
<ul>
<li>信息的局部性</li>
<li>Windows从c盘开始时是受其前身Dos系统的影响，那个有a、b</li>
<li><code>mount disk.img  /mnt</code></li>
<li><code>umount /mnt</code></li>
<li>硬（hard）链接
<ul>
<li><code>ln /usr/local/python3 python</code></li>
<li>目录中仅存储指向文件数据的指针</li>
<li>允许一个文件被多个目录引用.</li>
<li>无法用来链接目录，也不能跨文件系统</li>
<li>通过<code>ls -i</code>查看是否为硬链接</li>
</ul>
</li>
<li>软 (symbolic) 链接
<ul>
<li>“快捷方式”</li>
<li><code> ln -s ../p24 p24</code></li>
<li>目录从“树”变为了“图”，还是有环图</li>
</ul>
</li>
<li><code>cd</code>的特殊性
<ul>
<li>每个进程都有一个对应的工作目录（pwd），而这个目录只有系统调用才能够修改</li>
</ul>
</li>
</ul>
<h2 id="p27-fat-和-unix-文件系统-数据结构视角的文件系统-fat-手册导读和目录树遍历">p27 FAT 和 UNIX 文件系统 (数据结构视角的文件系统; FAT 手册导读和目录树遍历)</h2>
<ul>
<li>数据结构的假设：数据是以字节来存储的。</li>
<li>RAM 和 block的区别</li>
<li>FAT(File Allocation Table)
<ul>
<li>将指针集中存放在文件系统的某个区域</li>
<li>适合小文件</li>
<li>会产生碎片（fragmentation）</li>
<li>基本假设
<ul>
<li>链表无环且长度和文件大小一致</li>
<li>FREE的cluster不能有入边</li>
</ul>
</li>
</ul>
</li>
<li>cluster</li>
<li>sector</li>
<li>ext2
<ul>
<li>大文件的随机读写性能提升明显 (O(1))</li>
<li>支持链接 (一定程度减少空间浪费)</li>
<li>inode 在磁盘上连续存储，便于缓存/预取</li>
<li>碎片</li>
</ul>
</li>
</ul>
<h2 id="p28-持久数据的可靠性-raid-崩溃一致性-fsck-和日志">p28 持久数据的可靠性 (RAID; 崩溃一致性; FSCK 和日志)</h2>
<ul>
<li>虚拟化
<ul>
<li>cpu的虚拟化：通过分时等技术让多个进程并行，相当于虚拟出了多个cpu</li>
<li>内存的虚拟化：一份内存通过mmu，虚拟成每个进程的地址空间</li>
<li>RAID：反向的虚拟化：多个磁盘虚拟化一个磁盘</li>
</ul>
</li>
<li>RAID
<ul>
<li>RAID0 : 交错排列： 提升容量和带宽</li>
<li>RAID1 : 提升容错和读带宽</li>
<li>RAID4 : 额外的一块校验盘
<ul>
<li>致命缺陷：随机写的性能只能有校验盘性能的一半</li>
</ul>
</li>
<li>RAID5 : Rotating Parity</li>
</ul>
</li>
<li>RAID带来的联想：
多个磁盘虚拟化为一个又大又快又可靠的磁盘，多台电脑虚拟化为一个又大又快又可靠的电脑
那能不能多个神经网络虚拟化为一个更好的神经网络</li>
<li>崩溃一致性  (Crash Consistency)
<ul>
<li>场景：写入的时候突然断电了怎么办？</li>
<li>方法1：按照一定顺序来写，且 “all or nothing”
<ul>
<li>困难：磁盘不提供多块读写 “all or nothing” 的支持，甚至为了性能，没有顺序保证。</li>
</ul>
</li>
<li>方法2： File System Checking (FSCK)
<ul>
<li>根据磁盘上已有的信息，恢复出 “最可能” 的数据结构</li>
<li>困难：难；如果修复的时候再掉一次电？</li>
</ul>
</li>
<li>方法3： 日志</li>
<li>具体：
<ul>
<li>数据结构操作发生时，用 (2) append-only 记录日志</li>
<li>日志落盘后，用 (1) 更新数据结构</li>
<li>崩溃后，重放日志并清除 (称为 redo log；相应也可以 undo log)</li>
</ul>
</li>
<li>优化: journaling (jdb2)</li>
</ul>
</li>
</ul>
<h2 id="p30-现代存储系统-关系数据库和分布式存储系统">p30 现代存储系统 (关系数据库和分布式存储系统)</h2>
<ul>
<li>数据库
<ul>
<li>关键
<ul>
<li>索引</li>
<li>查询优化</li>
</ul>
</li>
<li>magic：你只管写sql语句，相应的搜索优化它来做</li>
<li>要求：acid
<ul>
<li>Atoming</li>
<li>Consistency</li>
<li>Isolation</li>
<li>Durability</li>
</ul>
</li>
</ul>
</li>
<li>图灵奖
<ul>
<li>这门课听下来，听到了好多知识点背后都是获得过图灵奖的研究，甚至开创了一整个产业。</li>
</ul>
</li>
<li>关系型数据库跟不上社交网络的需求</li>
<li>cap theorem
<ul>
<li>Consistency</li>
<li>Availability</li>
<li>Partition Tolerance</li>
</ul>
</li>
<li>分布式存储系统</li>
</ul>
<h2 id="感想">感想</h2>
<p>蒋炎炎这门课还是别人推荐的。第一次看到还不以为意，但出现的次数多了就觉得有必要去看看。发现是一大惊喜。</p>
<h2 id="收获">收获</h2>
<ol>
<li>原版书能看得下来了。大段的英文，之前看着有点怕，现在觉得也能看下来，并且速度还可以。</li>
</ol>
<h2 id="课外资料">课外资料</h2>
<ul>
<li><a href="https://plantegg.github.io/2022/06/05/%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E5%BC%80%E9%94%80/"  target="_blank" rel="noopener" >上下文切换的代价</a></li>
<li><a href="https://plantegg.github.io/2021/06/01/CPU%E7%9A%84%E5%88%B6%E9%80%A0%E5%92%8C%E6%A6%82%E5%BF%B5/"  target="_blank" rel="noopener" >CPU的制造和概念</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>诗词里的地名</title>
      <link>https://euds63.github.io/2023/%E8%AF%97%E8%AF%8D%E9%87%8C%E7%9A%84%E5%9C%B0%E5%90%8D/</link>
      <pubDate>Mon, 01 May 2023 00:32:17 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/%E8%AF%97%E8%AF%8D%E9%87%8C%E7%9A%84%E5%9C%B0%E5%90%8D/</guid>
      <description>人生代代无穷已，江月年年望相似</description>
      <content:encoded><![CDATA[<h1 id="诗词里的地名">诗词里的地名</h1>
<p><strong>出去旅游，有件事我一直很热衷，就是去那些在诗词中出现过的地方中走走。这往往能给我一种感觉，用张若虚的话来说就是“人生代代无穷已，江月年年望相似”。让我如此热衷的还有另一个原因：古人在某个地点因事因景所凝聚的个人感受，能让现在的我读到。而当年他们所在的地方或者地名，又能流传至今。这两点每一点都是很难得的，而两点同时发生，更是凤毛麟角。</strong></p>
<h2 id="南京">南京</h2>
<h3 id="金陵">金陵</h3>
<pre tabindex="0"><code>桂枝香·金陵怀古 王安石

登临送目，正故国晚秋，天气初肃。千里澄江似练，翠峰如簇。归帆去棹残阳里，背西风，酒旗斜矗。彩舟云淡，星河鹭起，画图难足。

念往昔，繁华竞逐，叹门外楼头，悲恨相续。千古凭高对此，谩嗟荣辱。六朝旧事随流水，但寒烟衰草凝绿。至今商女，时时犹唱，后庭遗曲。(衰草 一作：芳草)
</code></pre><h2 id="扬州">扬州</h2>
<h3 id="扬州-1">扬州</h3>
<pre tabindex="0"><code>江城子 苏轼
墨云拖雨过西楼。水东流，晚烟收。柳外残阳，回照动帘钩。今夜巫山真个好，花未落，酒新篘。

美人微笑转星眸。月华羞，捧金瓯。歌扇萦风，吹散一春愁。试问江南诸伴侣，谁似我，醉扬州。
</code></pre><p>喜欢“墨云拖雨”中这个“拖”字。这几天雨下得很大，雨云我也常常看，但想不到用“拖”去形容。</p>
<h3 id="维扬">维扬</h3>
<pre tabindex="0"><code>扬州慢 姜夔

淳熙丙申至日，予过维扬。夜雪初霁，荠麦弥望。入其城则四顾萧条，寒水自碧，暮色渐起，戍角悲吟。予怀怆然，感慨今昔，因自度此曲。千岩老人以为有《黍离》之悲也。

淮左名都，竹西佳处，解鞍少驻初程。过春风十里，尽荠麦青青。自胡马窥江去后，废池乔木，犹厌言兵。渐黄昏，清角吹寒，都在空城。

杜郎俊赏，算而今，重到须惊。纵豆蔻词工，青楼梦好，难赋深情。二十四桥仍在，波心荡，冷月无声。念桥边红药，年年知为谁生？
</code></pre><p>扬州城历史上很坎坷，几经战乱。姜夔当时写下这首词时，杨州正是战乱结束。但他描绘的还是很有意境的。我觉得单是这词牌名就很美。很简单的一个“慢”字，就写出了一种令人向往的生活节奏。</p>
<h3 id="瓜州">瓜州</h3>
<ul>
<li>
<p><em>楼船夜雪瓜洲渡，铁马秋风大散关。</em></p>
</li>
<li>
<p><em>京口瓜州一水间</em></p>
</li>
</ul>
<p>瓜州渡现在是一个公园。我经过，但还没有进去过。</p>
<p>可以坐镇扬汽渡来体验“一水间”。体验感很不错：大货车，小车，人共乘一艘船。江面宽阔，江风蛮大的，甚至有些冷。</p>
<h3 id="二十四桥">二十四桥</h3>
<ul>
<li><em>二十四桥明月夜，玉人何处教吹箫。</em></li>
<li><em>二十四桥仍在，波心荡，冷月无声。</em></li>
</ul>
<p>我之前读到“二十四桥明月夜”的时候，下意识地想象成是月光照耀下的二十四座桥。但现在二十四桥是瘦西湖景区内的一座景点，只有一座桥。</p>
<p>但据黄永玉老先生的经历，他年轻时也去找过，但“狠狠地走了一趟”后，“连二十四桥桥基都捉摸不到”。如果那桥就在瘦西湖景区内，我想他并不需要费这么大一番功夫。所以我仍愿意保留自己之前的想象。</p>
<h3 id="春江">春江</h3>
<pre tabindex="0"><code>春江花月夜 张若虚
春江潮水连海平，海上明月共潮生。

滟滟随波千万里，何处春江无月明！

江流宛转绕芳甸，月照花林皆似霰。

空里流霜不觉飞，汀上白沙看不见。

江天一色无纤尘，皎皎空中孤月轮。

江畔何人初见月？江月何年初照人？

人生代代无穷已，江月年年望相似。

不知江月待何人，但见长江送流水。

白云一片去悠悠，青枫浦上不胜愁。

谁家今夜扁舟子？何处相思明月楼？

可怜楼上月徘徊，应照离人妆镜台。

玉户帘中卷不去，捣衣砧上拂还来。

此时相望不相闻，愿逐月华流照君。

鸿雁长飞光不度，鱼龙潜跃水成文。

昨夜闲潭梦落花，可怜春半不还家。

江水流春去欲尽，江潭落月复西斜。

斜月沉沉藏海雾，碣石潇湘无限路。

不知乘月几人归，落月摇情满江树。
</code></pre><p>此首诗中的春江说法众多，主流的有三种说法，但都是指向扬州
（我中学的时候，慕着其“孤篇压倒全唐”之名背过，但到如今还是不能完全欣赏。背的也是七零八落，惭愧）</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>博客与文章</title>
      <link>https://euds63.github.io/2023/%E5%8D%9A%E5%AE%A2%E4%B8%8E%E6%96%87%E7%AB%A0/</link>
      <pubDate>Sun, 30 Apr 2023 16:06:34 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/%E5%8D%9A%E5%AE%A2%E4%B8%8E%E6%96%87%E7%AB%A0/</guid>
      <description>博客和文章的推荐</description>
      <content:encoded><![CDATA[<h1 id="博客与文章">博客与文章</h1>
<p><em>打算记录些我看过的觉得有意思的博客和文章</em>
<em>博客会简单写下推荐的理由，其实也说不上推荐，因为我觉得这些博主都可以称得上是我需要向之学习的大佬</em>
<em>文章会简单记录下自己读的感受，但会避免变成是对文章的梗概</em></p>
<p><del><strong>感觉这个题目不能很好地概括我这篇的内容，但现在又没想好</strong></del></p>
<h2 id="博客">博客</h2>
<ul>
<li><a href="https://plantegg.github.io/"  target="_blank" rel="noopener" >plantegg</a> 计算机网络相关的，干货很多</li>
<li><a href="https://plumz.me/"  target="_blank" rel="noopener" >Plum&rsquo;s Blog</a> 作者很有趣，涉猎也很广泛。博客持续更新了十几年了。</li>
<li><a href="https://freemind.pluskid.org/"  target="_blank" rel="noopener" >Free Mind</a> 有思考，有科普，内容足。</li>
<li><a href="https://blog.jm233333.com/"  target="_blank" rel="noopener" >JM233333&rsquo;s Blog</a> 作者是南大在读博士生，也是jyy操作系统课的助教</li>
<li><a href="https://seuite.github.io/"  target="_blank" rel="noopener" >SEUITE</a> 偶然间发现的学校曾存在过的一个协会。从仅存的内容中可以看出是一个很有意思的社团，很可惜它没有传承下来。</li>
<li><a href="https://soulogic.com/about"  target="_blank" rel="noopener" >灵魂逻辑</a> 先关注的Twitter才发现的博客。作者的经历蛮羡慕的。</li>
<li><a href="https://rehoni.github.io/cn/"  target="_blank" rel="noopener" >罗皓的个人博客</a> 一个学长/学姐的blog。从17年还在大学，到最后一篇博文是痛风的注意事项，能看出ta经历了很多。很吸引我的是ta对每个月支出的总结，虽然可能没太多参考夹着，但还是能让我对以后可能的生活一窥一二。</li>
<li><a href="http://paulsin.blogspot.com/"  target="_blank" rel="noopener" >Blog of Insanity</a> 05年更新至今，内容很足。博主知识很渊博。博客的slogan是“读书，是为了遮眼睛”。还没悟到是啥意思。</li>
<li><a href="http://blog.orzotl.com/1?page=1"  target="_blank" rel="noopener" >::Nothing but SAi</a> 博主为Bangumi的创始者。博客从05年一直活跃到11年，11年这时候博主大概21岁，就已经很有成就了。我现在也刚好是21岁，相比之下实感汗颜。</li>
</ul>
<h2 id="文章">文章</h2>
<ul>
<li>
<p><a href="https://plumz.me/archives/12906/"  target="_blank" rel="noopener" >你所热爱的，就是你的生活</a>
我还蛮喜欢看别人写的年度总结的。像是开了一扇窗去了解一个陌生人一年来的生活。但自己却没啥勇气去写年度总结，并将之放之网上。再说回来这篇文章，我很认同这段话。</p>
<blockquote>
<p>有时候我想想，互联网给我带来的是更多时光的消磨，有的时候，我是不是应该返璞归真，多多做一些“远离网络”的事情。比如翻出自己曾经买过的那些书，拿出自己还没有拆封的音乐 CD，找到自己当年吃灰的 3DS，享受那些我们还没有被浮躁的互联网绑架时候的珍贵东西，或许这样对我来说是更好的选择，自己也会得到更多的提高。</p>
</blockquote>
<p>我有好多时间是用来刷Twitter，贴吧，尽管这些碎片化的东西常常就是刷过去就忘了。我觉得我的这些时间值得更好的去处。</p>
</li>
<li>
<p><a href="https://www.jasonwei.net/blog/practicing-ai-research"  target="_blank" rel="noopener" >Practicing AI research</a></p>
<ul>
<li>这句让我印象很深。有被激励到。
<blockquote>
<p>doing research is a skill that can be learned through practice, much like sports or music.</p>
</blockquote>
</li>
<li>作者谈到沉没成本时，是这样说的&quot;it’s important to identify sunk cost fallacies&quot;。我的理解是当断则断，不要过多地去考虑沉没成本。</li>
</ul>
</li>
<li>
<p><a href="https://luolei.org/gfw/"  target="_blank" rel="noopener" >GFW之父方滨兴讲座后杂想</a></p>
<ul>
<li>看到这篇的时候觉得很巧。因为我之前就follow了作者的Twitter。现在无意间看到了他十年前还在上大学时听讲座的想法。这种感觉很棒。</li>
<li>另一个感触是尽管十年过去，这篇文章依旧没有过时。甚至墙更高了些。作者文中的畅想&quot;不知20年后，如果我们走进了一个开放、自由的公民社会，那堵墙不再，方校长还在的话，他会怎么回味自己的所作所为。&ldquo;距离当时的二十年后，还有十年。</li>
<li>但最近有一个现象我看着很欣喜。我看到周围好多同学都在用着ChatGPT。而用它是需要用代理的。</li>
</ul>
</li>
<li>
<p><a href="https://freemind.pluskid.org/misc/elden-ring-pvp-and-theory-of-mind/"  target="_blank" rel="noopener" >Elden Ring PvP and Theory of Mind</a></p>
<ul>
<li>很有趣，作者从pvp讲到ToM。并科普了ToM的概念。我觉得作者科普的很好。既讲明白了概念，还让读者——至少是我，对此有了进一步了解的兴趣。</li>
<li>文中谈到 AI 语言模型。让我想到之前看过的LLM继续发展下去，可能会有类似读心术的效果，能预测你下一步要做什么，甚至是在想什么。我觉得这在一定程度是可行的。因为现代所谓的一些读心术，很多都是基于微表情的观察和分析其过去的行为模式和经历上。</li>
</ul>
</li>
<li>
<p><a href="https://freemind.pluskid.org/electronics/5x12-keyboard-debugging2/"  target="_blank" rel="noopener" >记一次有意义的熬夜</a></p>
<ul>
<li>作者客制化键盘的经历。</li>
<li>我自己算是半个机械键盘爱好者，也接触了些客制化键盘，但一直只停留在很初级的阶段。所以看得很起劲。</li>
</ul>
</li>
<li>
<p><a href="https://soulogic.com/item/3294"  target="_blank" rel="noopener" >我的郑老三死了</a></p>
<ul>
<li>作者纪念自己的猫</li>
<li>很有感觉</li>
</ul>
</li>
<li>
<p><a href="https://www.skywind.me/blog/archives/2719"  target="_blank" rel="noopener" >互联网技术比游戏后端技术领先十年吗？</a></p>
<ul>
<li>现在已经习以为然的互联网体验，其背后的技术令人咋舌。</li>
</ul>
</li>
<li>
<p><a href="https://www.kivinsae.com/2023/05/17/2023-05-17-no_sophism/"  target="_blank" rel="noopener" >关于 初码先生 某推中典型诡辩论部分的拆解</a></p>
<ul>
<li>有趣</li>
</ul>
</li>
<li>
<p><a href="https://web.archive.org/web/20060207013551/http://www.joelonsoftware.com/articles/fog0000000339.html"  target="_blank" rel="noopener" >Fire And Motion</a></p>
<ul>
<li>作者在文中有个观点：大公司不断地技术迭代，有一部分原因是为了让竞争对手疲于奔命，“has no choice but to spend all their time porting and keeping up, time that they can&rsquo;t spend writing new features.”</li>
<li></li>
</ul>
<blockquote>
<p>Maybe as a software developer I really can&rsquo;t control when I&rsquo;m productive, and I just have to take the slow times with the fast times and hope that they average out to enough lines of code to make me employable”</p>
</blockquote>
</li>
<li>
<p><a href="https://sive.rs/pnt"  target="_blank" rel="noopener" >The past is not true</a></p>
<ul>
<li>文章还没看，先被这个网站所震撼到。好短，好漂亮。</li>
<li>读完后让我十分怀念，让我想到以前做的英文阅读题。 差不多相同的结构：故事、作者的感悟。</li>
<li>里面一句话我觉得值得记录：
<blockquote>
<p>We think of the past like it’s a physical fact - like it’s real. But the past is what we call our memory and stories about it. Imperfect memories, and stories built on one interpretation of incomplete information. That’s “the past”.</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>[读博第一年总结]</p>
<ul>
<li>
<p>读博对我来说太遥远，但最后一段我觉得值得记录：</p>
<blockquote>
<p>当然，对于我个人而言最重要的是，相信一切都是能结束的。 之前碰到同学的室友，隔壁专业的，聊如果挂科了，找不到工作，不得不回到国内，被卷进新文革，该怎么办。我说，大不了我还能跳楼，他说，大不了我就趴在泥里，吃草吃土地活下去。屋子内外充满了快活的空气。</p>
</blockquote>
<blockquote>
<p>我想，在现在这样的时代，确实需要一些这样的觉悟，才能活得更轻松一些。</p>
</blockquote>
</li>
<li>
<p>我最近偶尔会觉得焦虑，不过找到了一个自己觉得还算不错的排解方法。就是假设最坏的结果发生，然后我就会想，就算是那样我也是不能活，一旦接受了这个可能的最坏结果，我一般就没那么焦虑了。所以看到这段后，我会心一笑。</p>
</li>
</ul>
</li>
<li>
<p><a href="https://vadim.oversigma.com/MAS862/Project.html"  target="_blank" rel="noopener" >Information Processing in Human Body</a>
人体真奇妙</p>
</li>
<li>
<p><a href="https://writings.sh/post/naming"  target="_blank" rel="noopener" >浅谈编程中的命名（短文） | 春水煎茶 - 王超的个人博客</a></p>
<ul>
<li>基本上都认可。第二点我之前有注意到，但一直没有去落实。</li>
<li>我最近命名的时候喜欢用全称，因为觉得缩写时间久了很容易忘。</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>TinyTinyRSS-OPML-to-MD-Table</title>
      <link>https://euds63.github.io/2023/tinytinyrss-opml-to-md-table/</link>
      <pubDate>Sat, 29 Apr 2023 00:59:40 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/tinytinyrss-opml-to-md-table/</guid>
      <description>记录&lt;a href=&#34;https://github.com/EuDs63/TinyTinyRSS-OPML-to-MD-Table&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;EuDs63/TinyTinyRSS-OPML-to-MD-Table&lt;/a&gt; 的过程</description>
      <content:encoded><![CDATA[<h1 id="tinytinyrss-opml-to-md-table">TinyTinyRSS-OPML-to-MD-Table</h1>
<h2 id="需求由来">需求由来：</h2>
<p>我很喜欢读博客。但发现总有些很有趣的博客等着发现。所以我关注了些推荐博客的频道。同时，我也想分享些自己喜欢的博客，但每次去手动复制又显得太麻烦了。所以就想着做一个自动化的方式，顺带着也可以学习下Github Action.</p>
<h2 id="历程">历程</h2>
<ol>
<li>大部分时间是花在了如何获取opml文件上。Tiny Tiny RSS所给的文档较为精简，而网上相关的资料大都仅局限于如何部署。所以这一段只能是自己摸索。
<ul>
<li>TinyTinyRSS的网页版有给一个按钮能导出OPML，而这个按钮所指向的网址是<code>http://example.com/tt-rss/backend.php?op=opml&amp;method=export'</code>。但它是有个鉴权操作的。需要登录。</li>
<li>它的示例中有提供了一个登录的api调用，所以我开始的想法也是顺着这个来。想着直接添加data参数。但尝试了多种添加方式无果。</li>
<li>后来注意到登录成功是会返回session值的，于是先用curl试验了下。
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 登录并获取Session ID</span>
</span></span><span class="line"><span class="cl"><span class="nv">SESSION</span><span class="o">=</span><span class="k">$(</span>curl -s -d <span class="s1">&#39;{&#34;op&#34;:&#34;login&#34;,&#34;user&#34;:&#34;user&#34;,&#34;password&#34;:&#34;password&#34;}&#39;</span> http://example.com/tt-rss/api/ <span class="p">|</span> python -c <span class="s2">&#34;import sys, json; print(json.load(sys.stdin)[&#39;content&#39;][&#39;session_id&#39;])&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#获得opml文件</span>
</span></span><span class="line"><span class="cl">curl -o my_tiny_tiny_rss.opml <span class="s1">&#39;http://example.com/tt-rss/backend.php?op=opml&amp;method=export&#39;</span> --cookie <span class="s2">&#34;ttrss_sid=</span><span class="si">${</span><span class="nv">SESSION</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span></code></pre></div></li>
<li>转写成python是用的request。其实现在回头想想，这应该是蛮基础的操作，而且session之前也有接触过。如果早点想起来的话是可以少花些时间的。</li>
</ul>
</li>
<li>opml的解析有现成的库，用就是了。</li>
<li>然后就是把一些个人信息抽出来写在配置文件中。这里踩了一个坑。<code>data = {'op': 'login', 'user': user, 'password': password}</code>,我开始的时候是这样写的<code>data = f&quot;{{'op': 'login', 'user': {user}, 'password': {password}}}&quot;</code>。后者虽然在形式上看着一样，但前者是json对象，后者是字符串。这里也给我提了个醒：Python虽然有动态类型这个特性，但还是要注意类型错误。</li>
<li>最后是使用Github Action。之前也有使用过，但是是直接用的别人写好的workflow。所以也花了些时间学习了下。遇到的几个问题是
<ul>
<li>Yml文件的格式问题。这个可以用<a href="https://codebeautify.org/yaml-validator"  target="_blank" rel="noopener" >YAML Validator</a>来检查。Vscode应该也有相应的插件吧。</li>
<li>运行时需要用到的变量，是用的secret。我之前以为secret的value只能是字符串。但<a href="https://nekokiku.cn/2020/12/22/2020-12-22-Github-Action%E4%B8%ADpython%E8%8E%B7%E5%8F%96%E4%BB%93%E5%BA%93%E7%9A%84secrets/"  target="_blank" rel="noopener" >Github Action中python获取仓库的secrets</a>中提到，可以把一整个yml文件放在value里面。所以我就想那json文件应该也可以。试了下确实能行。这样我的代码需要修改的地方就很少了。</li>
<li>workflow的触发方式,要添加手动触发，需加上<code>workflow_dispatch:</code></li>
</ul>
</li>
</ol>
<h2 id="学到的知识">学到的知识</h2>
<ul>
<li>pipe和python的结合。下面这段是ChatGPT写的，太妙了。
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">SESSION</span><span class="o">=</span><span class="k">$(</span>curl -s -d <span class="s1">&#39;{&#34;op&#34;:&#34;login&#34;,&#34;user&#34;:&#34;user&#34;,&#34;password&#34;:&#34;password&#34;}&#39;</span> http://example.com/tt-rss/api/ <span class="p">|</span> python -c <span class="s2">&#34;import sys, json; print(json.load(sys.stdin)[&#39;content&#39;][&#39;session_id&#39;])&#34;</span><span class="k">)</span>
</span></span></code></pre></div></li>
<li>Github Action的使用</li>
<li>python request</li>
</ul>
<h2 id="尾巴">尾巴</h2>
<p>这个项目算是个很小的项目，但我还是花了半天的时间，而且是在ChatGPT的帮助下。之前看到这样一种说法，搜索引擎大幅降低了普通人获取知识的难度，而ChatGPT在此基础上更是降低了十分客观的一个量。结合自己这次的经历，我十分认同这个观点。通过我对背景的补充和提问，ChatGPT让我省去了花费在各种教程和不完善的文档上所要消费的时间。这比搜索引擎所做到的交互要更自然。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://tt-rss.org/wiki/ApiReference"  target="_blank" rel="noopener" >API Reference</a></li>
<li><a href="https://www.cnblogs.com/jiangleads/p/10636696.html"  target="_blank" rel="noopener" >curl命令实现上网认证登录</a></li>
<li><a href="https://nekokiku.cn/2020/12/22/2020-12-22-Github-Action%E4%B8%ADpython%E8%8E%B7%E5%8F%96%E4%BB%93%E5%BA%93%E7%9A%84secrets/"  target="_blank" rel="noopener" >Github Action中python获取仓库的secrets</a></li>
<li><a href="https://codebeautify.org/yaml-validator"  target="_blank" rel="noopener" >YAML Validator</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>xLog使用体验</title>
      <link>https://euds63.github.io/2023/xlog%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Thu, 20 Apr 2023 01:15:48 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/xlog%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid>
      <description>记录xLog的使用体验</description>
      <content:encoded><![CDATA[<p><em><a href="https://xlog.app/"  target="_blank" rel="noopener" >xLog</a>这个开源博客社区，由于<a href="https://github.com/DIYgod/RSSHub"  target="_blank" rel="noopener" >RSSHub</a>的作者的宣传，我前段时间就有听闻。。但我一直认同这样一种想法：&ldquo;一个博客的死掉不是不再更新，而是无法访问。&ldquo;而xLog毕竟是一个比较新的事物，无法保证其的可持续性，所以就一直没有使用的想法。</em></p>
<h2 id="缘起">缘起</h2>
<p>但今天听了一个<a href="https://xinbao.xlog.app/27"  target="_blank" rel="noopener" >No.27 和 Qwerty Learner 的开翼聊技术优化、产品运营和前端感悟</a>，我觉得讲得很好，看到它发布的平台有xLog。所以心念一转，想着去尝试一下，就当作一个备份也无妨。使用体验有几点值得一提：</p>
<h2 id="实际体验">实际体验</h2>
<ul>
<li>如其宣传的一样，上手很容易。连接web3钱包和邮件后，我再导入自己已有的md文件就能搭一个博客。我觉得很不错。</li>
<li>提供的编辑器对我来说算是锦上添花。因为我比较习惯于在vscode上进行编辑。</li>
<li>ai智能摘要。我还是更倾向于自己手动去写摘要。但好像xLog它无法识别我原有的<code>summary:T</code>，但其他的属性:<code>date:</code>,<code>tags:</code>,<code>title:</code>倒是有支持。+08:00</li>
<li>web3。相比较于其他的博客社区，web3是xLog一大特点。这个概念提出来也是有段时间了，但对我来说还是比较新的。这次xLog使用时我第一次去接触这方面的内容。好多概念我觉得都挺有趣的，我觉得应该找时间去了解下是怎么实现的。</li>
<li>社区。 因为是社区，这就意味着可能有更多的人会看到。都说写博客是为了自己看的，但如果有更多的人能看到自己的一些想法，那也不错。但我不想让自己陷入到这样一种情况：我因为太过于关注浏览量，点赞数等数据，然后却失去了自己写博客的初衷（关于初衷是什么，我想我会写一篇来好好思考下），那就得不偿失了。</li>
</ul>
<h2 id="尾巴">尾巴</h2>
<p>我以前写博客一般是这样的过程。</p>
<ol>
<li>有感想，然后记录下来，存在本地。</li>
<li>有空的时候会找时间，去从本地中的感想中挑选一些可以作为博文的。并对其进行稍微的修改（润色，脱敏），发布到<a href="https://euds63.github.io/"  target="_blank" rel="noopener" >euds63.github.io</a>上。</li>
</ol>
<p>但现在如果要在<a href="https://erica-2392.xlog.app/"  target="_blank" rel="noopener" >EuDs</a>也更新的话，那就还需要第三步。
3. 手动导入到xLog上</p>
<p>三个步骤中，第一二步是没法减掉的。而且<a href="https://euds63.github.io/"  target="_blank" rel="noopener" >euds63.github.io</a>的更新我觉得还是会作为我的博客主要托管站。而第三步，工作量虽然不是太大，但终究还是有点麻烦。所以我现在的想法是可以将第三步和第二步合并。不知道有没有相关的接口。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>感兴趣的知识/待细看</title>
      <link>https://euds63.github.io/2023/%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E7%9F%A5%E8%AF%86/%E5%BE%85%E7%BB%86%E7%9C%8B/</link>
      <pubDate>Sun, 16 Apr 2023 16:03:44 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E7%9F%A5%E8%AF%86/%E5%BE%85%E7%BB%86%E7%9C%8B/</guid>
      <description>记录我感兴趣的知识或者说需要细看的内容</description>
      <content:encoded><![CDATA[<h1 id="感兴趣的知识待细看">感兴趣的知识/待细看</h1>
<p><em>有些知识，我觉得有趣，平时也还算经常看到，但只是一知半解，所以下定决心要将其掌握。我觉得要掌握一个知识，有一个比较好的办法就是写个教程，让不知道的人看了教程后也能对这个知识有相当的了解。所谓教学相长也。又因为知之甚少而难以开一篇专门去叙述，所以权记录于此，作为备忘</em></p>
<p><em>网上冲浪的时候，或主动或被动，常会看到些我感兴趣的内容。有的时候是内容比较深，有的时候是内容让我有些感想。常常，我会选择不关闭它们，想着有时间一定要好好看，并记录下自己的感想。然后&hellip;通常就没有然后了。这并不是件好事。所以我就想着记录在这里，也算是对自己的一种监督，或者说Learn In Public。</em></p>
<h2 id="数字货币">数字货币</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://mp.weixin.qq.com/s/wEzbgXh1BDxYjz-xkHs0Gg"  target="_blank" rel="noopener" >匿名是一种设计</a></li>
<li><input disabled="" type="checkbox"> <a href="https://bitcoin.org/bitcoin.pdf"  target="_blank" rel="noopener" >Bitcoin: A Peer-to-Peer Electronic Cash System</a></li>
</ul>
<h2 id="加密">加密</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://program-think.blogspot.com/2010/02/introduce-digital-certificate-and-ca.html#verify_file"  target="_blank" rel="noopener" >数字证书及 CA 的扫盲介绍</a></li>
<li><input disabled="" type="checkbox"> <a href="https://jysperm.me/2017/09/gpg-and-e2ee/"  target="_blank" rel="noopener" >GPG 与端到端加密：论什么才是可以信任的</a></li>
</ul>
<h2 id="interpreter">interpreter</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://ruslanspivak.com/lsbasi-part1/"  target="_blank" rel="noopener" >https://program-think.blogspot.com/2010/02/introduce-digital-certificate-and-ca.html#verify_file</a></li>
</ul>
<h2 id="gpt">GPT</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://viper.cs.columbia.edu/"  target="_blank" rel="noopener" >ViperGPT: Visual Inference via Python Execution for Reasoning</a></li>
<li><input disabled="" type="checkbox"> <a href="https://arxiv.org/abs/2304.03442"  target="_blank" rel="noopener" >Generative Agents: Interactive Simulacra of Human Behavior</a></li>
</ul>
<h2 id="diffusion">diffusion</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.biorxiv.org/content/10.1101/2022.11.18.517004v2.full.pdf"  target="_blank" rel="noopener" >High-resolution image reconstruction with latent diffusion models from humanbrain activity</a></li>
</ul>
<h2 id="神经网络">神经网络</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://zhuanlan.zhihu.com/p/104475016"  target="_blank" rel="noopener" >[干货]深入浅出LSTM及其Python代码实现</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.cnblogs.com/subconscious/p/5058741.html"  target="_blank" rel="noopener" >神经网络浅讲：从神经元到深度学习</a></li>
</ul>
<h2 id="博客">博客</h2>
<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://luolei.org/gfw/"  target="_blank" rel="noopener" >GFW之父方滨兴讲座后杂想</a></li>
<li><input disabled="" type="checkbox"> <a href="https://lutaonan.com/blog/reason-why-your-blog-is-not-alive/"  target="_blank" rel="noopener" >为什么无法坚持写博客</a></li>
<li><input disabled="" type="checkbox"> <a href="https://yzyyz.top/archives/js_snake.html"  target="_blank" rel="noopener" >JS初探，给博客首页添加一个贪吃蛇热力图</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://plumz.me/archives/12906/"  target="_blank" rel="noopener" >你所热爱的，就是你的生活</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.zxch3n.com/local-first/"  target="_blank" rel="noopener" >译：本地优先软件 Local-first software</a></li>
<li><input disabled="" type="checkbox"> <a href="https://densecollections.top/posts/4074/"  target="_blank" rel="noopener" >MIT计算机科学课堂中学不到的知识</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/XXIIVV/webring"  target="_blank" rel="noopener" >XXIIVV/webring</a></li>
</ul>
<h2 id="开源">开源</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://github.com/zloirock/core-js/blob/master/docs/2023-02-14-so-whats-next.md"  target="_blank" rel="noopener" >So, what&rsquo;s next?</a></li>
</ul>
<h2 id="网络">网络</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://plantegg.github.io/2019/05/15/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82%E7%BD%91%E7%BB%9C--%E4%B8%80%E4%B8%AA%E7%BD%91%E7%BB%9C%E5%8C%85%E7%9A%84%E6%97%85%E7%A8%8B/"  target="_blank" rel="noopener" >就是要你懂网络&ndash;一个网络包的旅程</a></li>
<li><input disabled="" type="checkbox"> <a href="https://gfw.report/publications/usenixsecurity23/zh/"  target="_blank" rel="noopener" >中国的防火长城是如何检测和封锁完全加密流量的</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.iserica.com/posts/network101-socket-function-wrappers/"  target="_blank" rel="noopener" >「网络编程101」来封装一个简单的TCP服务吧！</a></li>
</ul>
<h2 id="机械键盘">机械键盘</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://freemind.pluskid.org/electronics/5x12-keyboard-debugging2/"  target="_blank" rel="noopener" >记一次有意义的熬夜</a></li>
</ul>
<h2 id="前端">前端</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://xlog.daidr.me/card-page"  target="_blank" rel="noopener" >写一个炫酷的个人名片页</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/"  target="_blank" rel="noopener" >An Interactive Guide to Flexbox</a></li>
</ul>
<h2 id="杂">杂</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.physics.umd.edu/courses/Phys606/spring_2011/einstein_electrodynamics_of_moving_bodies.pdf"  target="_blank" rel="noopener" >ON THE ELECTRODYNAMICS OF MOVINGBODIES</a></li>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Theory_of_mind"  target="_blank" rel="noopener" >Theory of mind</a></li>
<li><input disabled="" type="checkbox"> <a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html"  target="_blank" rel="noopener" >GAMES101: 现代计算机图形学入门</a></li>
<li><input disabled="" type="checkbox"> <a href="https://missing-semester-cn.github.io/"  target="_blank" rel="noopener" >The Missing Semester of Your CS Education</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.amazon.com/When-Brains-Dream-Exploring-Science/dp/1324002832"  target="_blank" rel="noopener" >When Brains Dream: Exploring the science and mystery of sleep</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.kivinsae.com/2023/05/17/2023-05-17-no_sophism/"  target="_blank" rel="noopener" >关于 初码先生 某推中典型诡辩论部分的拆解</a>
学习下辩论技巧</li>
<li><input disabled="" type="checkbox"> <a href="https://seuite.github.io/blog/2019-04/%E7%BC%96%E7%A8%8B%E8%AD%A6%E5%8F%A5-1301-30/"  target="_blank" rel="noopener" >编程警句 130（1-30）</a> 有趣的句子</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>表单学习</title>
      <link>https://euds63.github.io/2023/%E8%A1%A8%E5%8D%95%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Thu, 30 Mar 2023 23:52:16 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/%E8%A1%A8%E5%8D%95%E5%AD%A6%E4%B9%A0/</guid>
      <description>发现原来表单要做得符合直觉也是有些学问在里面的，遂记录如下。</description>
      <content:encoded><![CDATA[<h1 id="表单学习">表单学习</h1>
<p><em>偶然间看到了篇不错的文档，<a href="https://www.chromium.org/developers/design-documents/create-amazing-password-forms/"  target="_blank" rel="noopener" >Create Amazing Password Forms</a>,才发现原来表单要做得符合直觉也是有些学问在里面的，遂记录如下。</em></p>
<h2 id="group-related-fields-in-a-single-form">Group related fields in a single form</h2>
<p>我之前习惯把注册和登录分开来做，使用的不少网站也是这样。所以就导致了一种情况，在使用浏览器的密码自动保存时，往往注册完后要登录，就得再输一遍代码。但是我还不知道具体要怎么实现。</p>
<h2 id="use-autocomplete-attributes">Use autocomplete attributes</h2>
<p>autocomplete这个attribute我还是第一次见，查阅文档后，发现这个还蛮有用的。<a href="https://www.chromium.org/developers/design-documents/form-styles-that-chromium-understands/"  target="_blank" rel="noopener" >Password Form Styles that Chromium Understands</a>
e.g. <code>&lt;input name=bc autocomplete=&quot;section-home homeAddress&quot;&gt;</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"> <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">autocomplete</span><span class="o">=</span><span class="s">&#34;username&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl"> <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">autocomplete</span><span class="o">=</span><span class="s">&#34;current-password&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl"> <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Sign In!&#34;</span><span class="p">&gt;</span> 
</span></span></code></pre></div><p>而关于autocomplete和autofill的区别</p>
<p>我查了下有这样的回答</p>
<ul>
<li>autocomplete是HTML5新增的属性，用于指定浏览器是否应该启用表单自动完成功能，以及提供有关字段中预期信息类型的指导。</li>
<li>autofill是浏览器自带的自动填充功能，它会根据用户之前输入过的值来预测用户下一次可能输入的值，并在用户输入时自动填充。autofill不仅考虑了之前输入过的值，还考虑了字段的含义和结构。例如，Google Chrome实现了解析输入字段以猜测其类型和结构。</li>
</ul>
<h2 id="use-hidden-fields-for-implicit-information">Use hidden fields for implicit information</h2>
<p>这点对于我来说也是挺新鲜的。才知道尽管有些信息没必要让用户输入，但还是有必要在表单中所包含，以便于密码管理器。</p>
<p>文档中是这样讲的</p>
<blockquote>
<p>the user agent is allowed to provide the user with autocompletion values, but does not provide any further information about what kind of data the user might be expected to enter. User agents would have to use heuristics to decide what autocompletion values to suggest.</p>
</blockquote>
<p>目前我的理解是，autocomplete用来提升浏览器字段的类型，而autofill用来控制是否使用该功能</p>
<h2 id="尾巴">尾巴</h2>
<p>还是第一次看html的文档，不是太能看得下去，因为内容太多了，信息量比较大，但确实有用</p>
<ul>
<li>参考链接
<ul>
<li><a href="https://www.chromium.org/developers/design-documents/create-amazing-password-forms/"  target="_blank" rel="noopener" >Create Amazing Password Forms</a></li>
<li><a href="https://www.chromium.org/developers/design-documents/form-styles-that-chromium-understands/"  target="_blank" rel="noopener" >Password Form Styles that Chromium Understands</a></li>
<li><a href="https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofilling-form-controls%3A-the-autocomplete-attribute"  target="_blank" rel="noopener" >autocomplete</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>博客搭建</title>
      <link>https://euds63.github.io/2023/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 13 Mar 2023 12:50:17 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>记录博客搭建的过程,及途中遇到的问题和解决方式</description>
      <content:encoded><![CDATA[<h2 id="过程">过程</h2>
<p><em>记录博客搭建的过程</em></p>
<ol>
<li>框架是选用的<a href="https://hexo.io/zh-cn/docs/"  target="_blank" rel="noopener" >Hexo</a>,主题选用的是<a href="https://hexo.fluid-dev.com/docs"  target="_blank" rel="noopener" >Fluid</a>,本地部署十分顺利，跟着教程来就行。</li>
<li>调整配置的时候遇到了问题，我刚开始是直接使用<code>npm install --save hexo-theme-fluid</code>，但改配置的时候虽然有文档，但各项配置的位置不知道是怎么嵌套的，就选择了方式二。</li>
<li>本地配置好之后，要部署到Github Pages上。<a href="https://hexo.io/zh-cn/docs/github-pages"  target="_blank" rel="noopener" >Hexo所提供的教程</a>中，所使用的是<code>Github Action</code> 内置的 token 变量<code>GITHUB_TOKEN</code>。根据<a href="https://docs.github.com/en/actions/security-guidesautomatic-token-authentication?query=PA#using-the-github_token-in-a-workflow"  target="_blank" rel="noopener" >官方源文档的描述</a>,为了防止递归构建发生，使用<code>GITHUB_TOKEN</code>推送的代码不会再次触发任何action。而考虑到我希望后续能进一步触发和进一步了解<code>Github Action</code>,我选择自己设置key。</li>
<li>这个花的时间最多。走了不少弯路，最终是参考了<a href="https://vuepress-theme-reco.recoluan.com/views/other/github-actions.html"  target="_blank" rel="noopener" >使用 GitHub Actions 自动部署博客</a>。</li>
<li>action已经跑成功了，但访问时却发现还是404，检查后发现是自己未<a href="https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site"  target="_blank" rel="noopener" >Configuring a publishing source for your GitHub Pages site</a>。</li>
<li>添加谷歌验证：
参考了<a href="https://jactorsue.github.io/blog/2018/04/how-blog-on-githubpages-can-be-searched-by-google.html"  target="_blank" rel="noopener" >让Google搜索到搭建在Github Pages上的博客</a>
<ol>
<li>（前略）验证网站所有权时，选择使用HTML标记方式来验证。fluid主题的head路径为<code>\themes\fluid\layout\_partials\head.ejs</code></li>
</ol>
</li>
<li>减少加载时间，尚未实操，先记录几篇看到的好文
<ul>
<li><a href="https://www.voidking.com/dev-hexo-accelerate/"  target="_blank" rel="noopener" >Hexo加速访问</a></li>
<li><a href="https://www.voidking.com/dev-hexo-gulp/"  target="_blank" rel="noopener" >Hexo使用Gulp压缩静态资源</a></li>
</ul>
</li>
<li>插入图片，这篇写得挺完整的：
<a href="https://fuhailin.github.io/Hexo-images/"  target="_blank" rel="noopener" >在Hexo博客中插入图片的各种方式</a></li>
<li>添加最后修改时间:
T将主题配置文件<code>_config.yml</code>中的<code>post:copyright:update_date:enable:</code>设置为<code>enable</code>即可+08:00</li>
</ol>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ hexo new <span class="s2">&#34;My New Post&#34;</span>
</span></span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html"  target="_blank" rel="noopener" >Writing</a></p>
<h3 id="run-server">Run server</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ hexo server
</span></span></code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html"  target="_blank" rel="noopener" >Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ hexo generate
</span></span></code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html"  target="_blank" rel="noopener" >Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ hexo deploy
</span></span></code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html"  target="_blank" rel="noopener" >Deployment</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>RSS折腾记</title>
      <link>https://euds63.github.io/2023/rss%E6%8A%98%E8%85%BE%E8%AE%B0/</link>
      <pubDate>Wed, 08 Mar 2023 15:59:18 +0800</pubDate>
      
      <guid>https://euds63.github.io/2023/rss%E6%8A%98%E8%85%BE%E8%AE%B0/</guid>
      <description>记录ttrss的搭建过程和rss相关的内容</description>
      <content:encoded><![CDATA[<h1 id="rss折腾记">RSS折腾记</h1>
<p>3月7日，下午没有课，很闲。玩了会吸血鬼幸存者觉得索然无味，就想着试下之前没有成功的服务器。</p>
<p>先是试了下AZURE，但学生验证没过，放弃了。然后尝试阿里云。他有一个飞天加速3.0-高校计划，可以领取七个月的ECS。还是蛮顺利的。</p>
<p>领取后第一个想法是搭自己的RSS服务。基本上是照着<a href="https://sspai.com/post/57498#!"  target="_blank" rel="noopener" >找不到满意的 RSS 服务？你可以自己搭建一个</a>，来完成的。但中间还是有些曲折，踩了一些坑。</p>
<ul>
<li>
<p>首先是网络问题。文中给的地址都是Github上的，但下载速度实在不行。16M的文件要下载半个多小时。这个有两种解决方式是。首先尝试的是用镜像站，但因为尝试的镜像站有问题，再加上我后续还想在服务器上搭telegram机器人。于是选择用代理。参考了<a href="https://www.jianshu.com/p/53457e21fcd4"  target="_blank" rel="noopener" >如何让国内的阿里云服务器可以高速下载Github代码</a>,和所用机场的教程。但关于如何更换节点，还不清楚。现在会了，记录在<a href="https://euds63.github.io/2023/03/11/network/"  target="_blank" rel="noopener" >网络</a></p>
</li>
<li>
<p>其次是文中给的ttrss 的 docker-compose 配置文件有问题，自己修改后下的东西也不对。然后就想到直接复制过来。但对vim的操作实在是不熟悉，加上yml对间隔格式要求很严，在这上面折腾了好一会儿。
(发现是自己愚蠢，GitHub提供了相应的下载方式：点raw，跳转到的就是所需的网址了。比如我这步所需的代码就是<code>curl -fLo a.yml https://raw.githubusercontent.com/HenryQW/Awesome-TTRSS/main/docker-compose.yml</code>)</p>
</li>
<li>
<p>容器启动后，按照描述，我访问<code>{服务器 IP}:181</code>，应该可以直接看到 Tiny Tiny RSS 的 Web 前端。但却报502。后来想到，默认的181端口是不开放的，在安全组中添加了就可以了。</p>
</li>
<li>
<p>阅读器的选择也花了我很多时间，先是试已经使用过一段时间的<code>Fluent Reader</code>,但按照文档里所给的地址不成功，然后是选用<code>TTRSS-Reader</code>,这个就很顺利，但界面比较复古，加上功能不够多，也可能是我还没有发掘出来，就转而使用<code>FeedMe</code>,首先用的是TTRSS的api，但出现的问题是订阅地址能过来，但内容拉取不到，看issue才发现这是好几个月前就出现的bug，还没被修复，解决方法是转用fever api。但这个也是坑。首先是网页给的地址是<code>http:/[您的地址]/plugins.local/fever/</code>,而文档给的地址是<code>https://[您的地址]/plugins/fever</code>。但可能是不同阅读器设置的过滤方法不一样，<code>FeedMe</code>能用的地址是<code>http://[您的地址]/</code>,而<code>Fluent Reader</code>则是<code>http://[您的地址]//plugins/fever/</code>。</p>
</li>
</ul>
<p>以上就是整个搭建过程中所遇到的问题，目前发现<code>FeedMe</code>的功能明显得多，还有RSSHub也想用起来，订阅源想扩大到除了个人博客之外的其他。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
