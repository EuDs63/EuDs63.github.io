<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>git on EuDs&#39;s Blog</title>
    <link>https://euds63.github.io/tags/git/</link>
    <description>Recent content in git on EuDs&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 04 Sep 2022 12:31:47 +0800</lastBuildDate><atom:link href="https://euds63.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git学习笔记</title>
      <link>https://euds63.github.io/2022/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 04 Sep 2022 12:31:47 +0800</pubDate>
      
      <guid>https://euds63.github.io/2022/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>记录git学习</description>
      <content:encoded><![CDATA[<h1 id="git学习笔记">git学习笔记</h1>
<h2 id="使用技巧">使用技巧</h2>
<h3 id="github项目内搜索">Github项目内搜索</h3>
<p>在仓库页面上按 T ，然后直接输入文件名</p>
<hr>
<h2 id="记录">记录</h2>
<h3 id="gitee配置的记录">Gitee配置的记录</h3>
<p>因为srtp项目是用gitee作托管，所以今天试着配置了下Gitee，还是花了些时间的，记录如下：</p>
<ol>
<li>主要参考的是<a href="https://cloud.tencent.com/developer/article/1774890"  target="_blank" rel="noopener" >Git同时配置Gitee和GitHub</a>,但它上面第一步就是让清除git的全局设置，有点不敢，因为怕清除后自己之前设置的一些东西出错。</li>
<li>又看了几个教程，发现<a href="https://blog.csdn.net/weixin_43894513/article/details/104550377"  target="_blank" rel="noopener" >Github 与 Gitee 共存配置</a>上并没有说要清楚全局设置，于是就跟着上面的一步步走，很顺利地就设置好了。</li>
<li>一个收获是<code>config</code>,<code>id_rsa</code>都是可以用记事本打开并编辑的。</li>
</ol>
<h3 id="多人协作时的流程">多人协作时的流程</h3>
<p>这次小组项目用的是华为云，所以流程也都是基于华为云来说的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 注：代码中的中文请根据实际情况进行替换</span>
</span></span><span class="line"><span class="cl"><span class="c1">#确定好本次代码开发所要完成的任务，开好远程分支x，相关信息(分支名称，描述，关联工作项）要注明好</span>
</span></span><span class="line"><span class="cl">git pull <span class="c1">#确保代码、分支是最新的</span>
</span></span><span class="line"><span class="cl">git checkout -b 本地分支名 origin/远程分支名   <span class="c1">#检出远程分支到本地</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 代码开发</span>
</span></span><span class="line"><span class="cl">git add .
</span></span><span class="line"><span class="cl">git commit -m<span class="s2">&#34;适当的批注&#34;</span>
</span></span><span class="line"><span class="cl">git push <span class="c1">#将代码推送到远程分支，开发过程中这个操作可以频繁点，好处是：代码备份和版本管理</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 完成本次代码开发所要完成的任务后（请确定功能实现，本地调试没问题）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 接下来进行分支的合并 </span>
</span></span><span class="line"><span class="cl"><span class="c1"># 在华为云中新建合并请求（可设置检视人，评审人，让别人帮忙看看）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 合并完成后（默认设置是分支合并后，源分支是删除的）</span>
</span></span><span class="line"><span class="cl">git remote prune origin <span class="c1">#当华为云上显示远程分支已经删除，但git branch -r仍然看到所删除的分支，执行该命令</span>
</span></span><span class="line"><span class="cl">git checkout master <span class="c1">#切回master分支（一次任务完成后，建议切回master分支，这样pull的时候可以避免自己写的代码丢失的问题）</span>
</span></span><span class="line"><span class="cl">git branch -d 本地分支名 <span class="c1">#删除本次任务所用的本地分支（也可以不删，当作备份）</span>
</span></span></code></pre></div><h3 id="对remote-branch的认识">对remote branch的认识</h3>
<p>There are potentially three versions of every remote branch:</p>
<ol>
<li>The actual branch on the remote repository</li>
<li>The snapshot of that branch locally</li>
<li>A local branch that might be tracking the remote branch</li>
</ol>
<hr>
<h2 id="常用命令">常用命令</h2>
<h3 id="add">add</h3>
<ul>
<li><code>git add .</code> 会根据。gitignore做过滤</li>
<li><code>git add *</code> 会忽略。gitignore把任何文件都加入</li>
</ul>
<h3 id="推送">推送</h3>
<p>文件推送的三个步骤：</p>
<pre tabindex="0"><code>git add 
git commit -m&#34;输入想说的话&#34;
git push
</code></pre><h3 id="查看状况">查看状况</h3>
<p><code>git status</code></p>
<h3 id="分支">分支</h3>
<ul>
<li>
<p>转到另一个分支 `git checkout {分支名}</p>
</li>
<li>
<p>查看本地分支 <code>git branch</code></p>
</li>
<li>
<p>查看远程分支 <code>git branch -r</code></p>
</li>
<li>
<p>查看本地和远程分支 <code>git branch -a</code></p>
</li>
<li>
<p>删除本地分支 <code>git branch -d {本地分支名}</code></p>
</li>
<li>
<p>强制删除本地分支<code>git branch -D {本地分支名}</code></p>
</li>
<li>
<p>删除远程分支 <code>git push origin --delete {远程分支名}</code></p>
</li>
<li>
<p>已经删除的远程分支但仍<code>git branch -a</code>时仍显示 ：<code>git remote prune origin</code></p>
</li>
</ul>
<h3 id="日志">日志</h3>
<ul>
<li><code>git log</code> 查看分支提交历史</li>
<li><code>git reflog</code> 也是查看日志，主要区别是会显示<code>reset --hard</code></li>
</ul>
<h3 id="代码回退">代码回退</h3>
<ul>
<li><code>git reset --hard {commit_id}</code></li>
<li><code>git reset --hard HEAD^ </code> 回退到上一版本</li>
</ul>
<hr>
<h2 id="submodule">submodule</h2>
<ol>
<li>删除特定的Git子模块</li>
</ol>
<pre tabindex="0"><code class="language-git" data-lang="git"># 以取消themes/PaperMod为例
# 取消子模块的初始化
git submodule deinit -f -- themes/PaperMod
# 从项目中删除子模块的目录
git rm -f themes/PaperMod
# git rm -f themes/PaperMod
rm -rf .git/modules/themes/PaperMod
</code></pre><hr>
<h2 id="报错与解决">报错与解决</h2>
<ol>
<li>
<p>报错：</p>
<blockquote>
<p>Updates were rejected because the remote contains work that you donot have locally.</p>
</blockquote>
<ul>
<li><strong>场景</strong>:在尝试gitee的时候，先是建了个远程仓库。然后在本地新建了个同名的文件夹，然后
<pre tabindex="0"><code>git init 
git remote add origin https://gitee.com/spike23187/hello-gitee.git
</code></pre></li>
</ul>
<p>在文件夹里新建了个文件，<code>push</code>的时候报的错</p>
<ul>
<li><strong>解决</strong>: 根据下方的提示，是我没有先<code>pull</code>，本地文件不是最新的。</li>
</ul>
</li>
<li>
<blockquote>
<p>Updates were rejected because the tip of your current branch is behind its remote counterpart</p>
</blockquote>
<ul>
<li><strong>场景</strong>：上述那个场景中，<code>git pull origin master</code>后报的错</li>
<li><strong>解决</strong>：<code>git pull origin master --rebase</code></li>
<li><strong>参考链接</strong>：<a href="https://blog.csdn.net/weixin_42310154/article/details/118676936"  target="_blank" rel="noopener" >Git常见报错：Updates were rejected because the tip of your current branch is behind</a></li>
<li><strong>收获</strong>：虽然使用GitHub托管代码有段时间了，但一直是用插件简化操作的。这次算是第一次用git bash，就报了两个错，感觉git要用好，还是有段路要走的。</li>
</ul>
</li>
<li></li>
</ol>
<ul>
<li><strong>场景</strong>:push时报错,大意是网络问题</li>
<li><strong>解决</strong>：
<pre tabindex="0"><code>git config --global http.proxy &#39;http://127.0.0.1:7890&#39;
git config --global https.proxy &#39;http://127.0.0.1:7890&#39;
</code></pre></li>
</ul>
<hr>
<h1 id="可供参考的链接">可供参考的链接</h1>
<ul>
<li><a href="https://www.yiibai.com/git"  target="_blank" rel="noopener" >git教程</a></li>
<li><a href="https://www.theserverside.com/video/Git-reflog-vs-log-How-these-commit-history-tools-differ"  target="_blank" rel="noopener" >Git reflog vs. log: How these commit history tools differ</a></li>
<li><a href="http://blog.ch3nyang.top/miscellaneous/git%E5%AD%A6%E4%B9%A0/"  target="_blank" rel="noopener" >【杂】git学习</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/137856034"  target="_blank" rel="noopener" >拜托，不要再问我Git如何回滚代码</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
